(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('plyr'), require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-plyr', ['exports', 'plyr', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory(global['ngx-plyr'] = {}, global.Plyr, global.ng.core, global.rxjs, global.rxjs.operators));
}(this, (function (exports, Plyr, core, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var DefaultPlyrDriver = /** @class */ (function () {
        function DefaultPlyrDriver() {
        }
        DefaultPlyrDriver.prototype.create = function (params) {
            return new Plyr(params.videoElement, params.options);
        };
        DefaultPlyrDriver.prototype.updateSource = function (params) {
            params.plyr.source = params.source;
        };
        DefaultPlyrDriver.prototype.destroy = function (params) {
            params.plyr.destroy();
        };
        return DefaultPlyrDriver;
    }());

    var PlyrComponent = /** @class */ (function () {
        function PlyrComponent(elementRef, ngZone, renderer) {
            this.elementRef = elementRef;
            this.ngZone = ngZone;
            this.renderer = renderer;
            this.playerChange = new rxjs.BehaviorSubject(null);
            this.events = new Map();
            this.plyrType = 'video';
            // ngx-plyr events
            this.plyrInit = this.playerChange.pipe(operators.filter(function (player) { return !!player; }));
            // standard media events
            this.plyrProgress = this.createLazyEvent('progress');
            this.plyrPlaying = this.createLazyEvent('playing');
            this.plyrPlay = this.createLazyEvent('play');
            this.plyrPause = this.createLazyEvent('pause');
            this.plyrTimeUpdate = this.createLazyEvent('timeupdate');
            this.plyrVolumeChange = this.createLazyEvent('volumechange');
            this.plyrSeeking = this.createLazyEvent('seeking');
            this.plyrSeeked = this.createLazyEvent('seeked');
            this.plyrRateChange = this.createLazyEvent('ratechange');
            this.plyrEnded = this.createLazyEvent('ended');
            this.plyrEnterFullScreen = this.createLazyEvent('enterfullscreen');
            this.plyrExitFullScreen = this.createLazyEvent('exitfullscreen');
            this.plyrCaptionsEnabled = this.createLazyEvent('captionsenabled');
            this.plyrCaptionsDisabled = this.createLazyEvent('captionsdisabled');
            this.plyrLanguageChange = this.createLazyEvent('languagechange');
            this.plyrControlsHidden = this.createLazyEvent('controlshidden');
            this.plyrControlsShown = this.createLazyEvent('controlsshown');
            this.plyrReady = this.createLazyEvent('ready');
            // HTML5 events
            this.plyrLoadStart = this.createLazyEvent('loadstart');
            this.plyrLoadedData = this.createLazyEvent('loadeddata');
            this.plyrLoadedMetadata = this.createLazyEvent('loadedmetadata');
            this.plyrQualityChange = this.createLazyEvent('qualitychange');
            this.plyrCanPlay = this.createLazyEvent('canplay');
            this.plyrCanPlayThrough = this.createLazyEvent('canplaythrough');
            this.plyrStalled = this.createLazyEvent('stalled');
            this.plyrWaiting = this.createLazyEvent('waiting');
            this.plyrEmptied = this.createLazyEvent('emptied');
            this.plyrCueChange = this.createLazyEvent('cuechange');
            this.plyrError = this.createLazyEvent('error');
            // YouTube events
            this.plyrStateChange = this.createLazyEvent('statechange');
            this.subscriptions = [];
        }
        Object.defineProperty(PlyrComponent.prototype, "player", {
            get: function () {
                return this.playerChange.getValue();
            },
            enumerable: true,
            configurable: true
        });
        PlyrComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            this.subscriptions.push(this.plyrInit.pipe(operators.first()).subscribe(function (player) {
                var reinitTriggers = [changes.plyrOptions, changes.plyrPlaysInline, changes.plyrCrossOrigin].filter(function (t) { return !!t; });
                if (reinitTriggers.length) {
                    if (reinitTriggers.some(function (t) { return !t.firstChange; })) {
                        _this.initPlyr(true);
                    }
                }
                else {
                    _this.updatePlyrSource(player);
                }
            }));
        };
        PlyrComponent.prototype.ngOnDestroy = function () {
            this.destroyPlayer();
            this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
        };
        PlyrComponent.prototype.ngAfterViewInit = function () {
            this.initPlyr();
        };
        PlyrComponent.prototype.initPlyr = function (force) {
            var _this = this;
            if (force === void 0) { force = false; }
            if (force || !this.player) {
                this.ngZone.runOutsideAngular(function () {
                    _this.destroyPlayer();
                    _this.driver = _this.plyrDriver || new DefaultPlyrDriver();
                    _this.ensureVideoElement();
                    var newPlayer = _this.driver.create({
                        videoElement: _this.videoElement,
                        options: _this.plyrOptions,
                    });
                    _this.updatePlyrSource(newPlayer);
                    _this.playerChange.next(newPlayer);
                });
            }
        };
        PlyrComponent.prototype.updatePlyrSource = function (plyr) {
            this.driver.updateSource({
                videoElement: this.videoElement,
                plyr: plyr,
                source: {
                    type: this.plyrType,
                    title: this.plyrTitle,
                    sources: this.plyrSources,
                    poster: this.plyrPoster,
                    tracks: this.plyrTracks,
                },
            });
        };
        // see https://stackoverflow.com/a/53704102/1990451
        PlyrComponent.prototype.createLazyEvent = function (name) {
            var _this = this;
            return this.plyrInit.pipe(operators.switchMap(function () { return new rxjs.Observable(function (observer) { return _this.on(name, function (data) { return _this.ngZone.run(function () { return observer.next(data); }); }); }); }));
        };
        PlyrComponent.prototype.destroyPlayer = function () {
            var _this = this;
            if (this.player) {
                Array.from(this.events.keys()).forEach(function (name) { return _this.off(name); });
                this.driver.destroy({
                    plyr: this.player,
                });
                this.videoElement = null;
            }
        };
        Object.defineProperty(PlyrComponent.prototype, "hostElement", {
            get: function () {
                return this.elementRef.nativeElement;
            },
            enumerable: true,
            configurable: true
        });
        // this method is required because the plyr inserts clone of the original element on destroy
        // so we catch the clone element right here and reuse it
        PlyrComponent.prototype.ensureVideoElement = function () {
            var videoElement = this.hostElement.querySelector('video');
            if (videoElement) {
                this.videoElement = videoElement;
            }
            else {
                this.videoElement = this.renderer.createElement('video');
                this.videoElement.controls = true;
                if (this.plyrCrossOrigin) {
                    this.videoElement.setAttribute('crossorigin', '');
                }
                if (this.plyrPlaysInline) {
                    this.videoElement.setAttribute('playsinline', '');
                }
                this.renderer.appendChild(this.hostElement, this.videoElement);
            }
        };
        PlyrComponent.prototype.on = function (name, handler) {
            this.events.set(name, handler);
            this.player.on(name, handler);
        };
        PlyrComponent.prototype.off = function (name) {
            this.player.off(name, this.events.get(name));
            this.events.delete(name);
        };
        PlyrComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.NgZone },
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrDriver", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], PlyrComponent.prototype, "plyrType", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], PlyrComponent.prototype, "plyrTitle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], PlyrComponent.prototype, "plyrPoster", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], PlyrComponent.prototype, "plyrSources", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], PlyrComponent.prototype, "plyrTracks", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrOptions", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], PlyrComponent.prototype, "plyrCrossOrigin", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], PlyrComponent.prototype, "plyrPlaysInline", void 0);
        __decorate([
            core.ViewChild('v'),
            __metadata("design:type", core.ElementRef)
        ], PlyrComponent.prototype, "vr", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrInit", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrProgress", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrPlaying", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrPlay", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrPause", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrTimeUpdate", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrVolumeChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrSeeking", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrSeeked", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrRateChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrEnded", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrEnterFullScreen", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrExitFullScreen", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrCaptionsEnabled", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrCaptionsDisabled", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrLanguageChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrControlsHidden", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrControlsShown", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrReady", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrLoadStart", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrLoadedData", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrLoadedMetadata", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrQualityChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrCanPlay", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrCanPlayThrough", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrStalled", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrWaiting", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrEmptied", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrCueChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrError", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PlyrComponent.prototype, "plyrStateChange", void 0);
        PlyrComponent = __decorate([
            core.Component({
                selector: 'plyr, [plyr]',
                template: "",
                exportAs: 'plyr',
                styles: [""]
            }),
            __metadata("design:paramtypes", [core.ElementRef,
                core.NgZone,
                core.Renderer2])
        ], PlyrComponent);
        return PlyrComponent;
    }());

    var PlyrModule = /** @class */ (function () {
        function PlyrModule() {
        }
        PlyrModule = __decorate([
            core.NgModule({
                declarations: [
                    PlyrComponent,
                ],
                exports: [
                    PlyrComponent,
                ]
            })
        ], PlyrModule);
        return PlyrModule;
    }());

    exports.DefaultPlyrDriver = DefaultPlyrDriver;
    exports.PlyrComponent = PlyrComponent;
    exports.PlyrModule = PlyrModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-plyr.umd.js.map
