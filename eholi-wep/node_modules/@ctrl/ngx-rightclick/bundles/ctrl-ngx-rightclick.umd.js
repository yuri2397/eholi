(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ctrl/ngx-rightclick', ['exports', '@angular/core', '@angular/cdk/overlay', '@angular/cdk/portal', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global.ctrl = global.ctrl || {}, global.ctrl['ngx-rightclick'] = {}), global.ng.core, global.ng.cdk.overlay, global.ng.cdk.portal, global.rxjs, global.rxjs.operators));
}(this, (function (exports, i0, i1, portal, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var MenuPackage = /** @class */ (function () {
        function MenuPackage(menu, context) {
            this.menu = menu;
            this.context = context;
        }
        return MenuPackage;
    }());
    var MenuInjector = /** @class */ (function () {
        function MenuInjector(activeContextMenu, parentInjector, context) {
            this.activeContextMenu = activeContextMenu;
            this.parentInjector = parentInjector;
            this.context = context;
            this.menuContext = new MenuPackage(activeContextMenu, context);
        }
        MenuInjector.prototype.get = function (token, notFoundValue, flags) {
            if (token === MenuPackage) {
                return this.menuContext;
            }
            return this.parentInjector.get(token, notFoundValue, flags);
        };
        return MenuInjector;
    }());

    var ContextMenuService = /** @class */ (function () {
        function ContextMenuService(overlay, scrollStrategy, injector) {
            this.overlay = overlay;
            this.scrollStrategy = scrollStrategy;
            this.injector = injector;
            this.menus = [];
            this.id = 0;
        }
        /**
         *
         * @param $event triggering event
         * @param menuComponent the component to be shown
         * @param submenu is a menu within a menu
         * @param level if submenu, what level
         */
        ContextMenuService.prototype.show = function ($event, menuComponent, context, menuClose, menuAction, submenu, level) {
            if (submenu === void 0) { submenu = false; }
            var target;
            if (!submenu) {
                this.closeAll();
                target = {
                    getBoundingClientRect: function () { return ({
                        bottom: $event.clientY,
                        height: 0,
                        left: $event.clientX,
                        right: $event.clientX,
                        top: $event.clientY,
                        width: 0,
                    }); },
                };
            }
            else {
                // close other submenus
                this.closeAll(undefined, level);
                target = $event.target;
            }
            var el = new i0.ElementRef(target);
            var positionStrategy = this.overlay
                .position()
                .flexibleConnectedTo(el)
                .withFlexibleDimensions(false);
            if (!submenu) {
                positionStrategy.withPositions([
                    {
                        originX: 'start',
                        originY: 'bottom',
                        overlayX: 'start',
                        overlayY: 'top',
                    },
                    {
                        originX: 'start',
                        originY: 'top',
                        overlayX: 'start',
                        overlayY: 'bottom',
                    },
                    {
                        originX: 'end',
                        originY: 'top',
                        overlayX: 'start',
                        overlayY: 'top',
                    },
                    {
                        originX: 'start',
                        originY: 'top',
                        overlayX: 'end',
                        overlayY: 'top',
                    },
                    {
                        originX: 'end',
                        originY: 'center',
                        overlayX: 'start',
                        overlayY: 'center',
                    },
                    {
                        originX: 'start',
                        originY: 'center',
                        overlayX: 'end',
                        overlayY: 'center',
                    },
                ]);
            }
            else {
                positionStrategy.withPositions([
                    {
                        originX: 'end',
                        originY: 'top',
                        overlayX: 'start',
                        overlayY: 'top',
                    },
                    {
                        originX: 'start',
                        originY: 'top',
                        overlayX: 'end',
                        overlayY: 'top',
                    },
                    {
                        originX: 'end',
                        originY: 'bottom',
                        overlayX: 'start',
                        overlayY: 'bottom',
                    },
                    {
                        originX: 'start',
                        originY: 'bottom',
                        overlayX: 'end',
                        overlayY: 'bottom',
                    },
                ]);
            }
            var t = {
                submenu: submenu,
                id: this.id++,
                isMenuHovered: new rxjs.BehaviorSubject(false),
                isTriggerHovered: new rxjs.BehaviorSubject(false),
            };
            var menuInjector = new MenuInjector(t, this.injector, context);
            var componentPortal = new portal.ComponentPortal(menuComponent, undefined, menuInjector);
            var overlayRef = this.overlay.create({
                positionStrategy: positionStrategy,
                panelClass: 'ngx-contextmenu',
                scrollStrategy: this.scrollStrategy.close(),
            });
            var component = overlayRef.attach(componentPortal);
            var res = Object.assign(Object.assign({ overlayRef: overlayRef, component: component }, t), { menuClose: menuClose, menuAction: menuAction });
            this.menus.push(res);
            return res;
        };
        ContextMenuService.prototype.getCurrentLevel = function () {
            return this.menus.length;
        };
        ContextMenuService.prototype.closeAll = function (context, idx) {
            if (idx === void 0) { idx = 0; }
            for (var index = idx; index < this.menus.length; index++) {
                var menu = this.menus[index];
                this.destroyMenu(menu, context);
            }
            this.menus.splice(idx, this.menus.length);
        };
        ContextMenuService.prototype.destroyMenu = function (menu, context) {
            menu.component.instance._state = 'exit';
            if (menu.component.instance.lazy) {
                menu.component.instance._animationDone
                    .pipe(operators.filter(function (event) { return event.toState === 'exit'; }), operators.take(1))
                    .subscribe(function () {
                    menu.overlayRef.detach();
                    menu.overlayRef.dispose();
                });
            }
            else {
                menu.overlayRef.detach();
                menu.overlayRef.dispose();
            }
            if (context) {
                menu.menuAction.next(context);
            }
            menu.menuClose.next();
        };
        ContextMenuService.prototype.close = function (menu, menuIndex, context) {
            this.destroyMenu(menu, context);
            this.menus.splice(menuIndex, 1);
        };
        ContextMenuService.prototype.checkOutsideClick = function ($event) {
            var e_1, _a;
            try {
                for (var _b = __values(this.menus), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var m = _c.value;
                    var clickedInside = m.component.location.nativeElement.contains($event.target);
                    if (clickedInside) {
                        $event.preventDefault();
                        $event.stopPropagation();
                        return;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.closeAll();
        };
        ContextMenuService.prototype.closeSubMenu = function (id) {
            var menuIndex = this.menus.findIndex(function (n) { return n.id === id; });
            if (menuIndex === -1 || menuIndex !== this.menus.length - 1) {
                return;
            }
            // make sure we can close the current menu
            var menu = this.menus[menuIndex];
            if (menu.isMenuHovered.getValue() || menu.isTriggerHovered.getValue()) {
                return;
            }
            // close all menus up if possible
            for (var index = this.menus.length - 1; index >= 1; index--) {
                var m = this.menus[index];
                if (!m.isMenuHovered.getValue() && !m.isTriggerHovered.getValue()) {
                    this.close(m, index);
                }
                else {
                    return;
                }
            }
        };
        return ContextMenuService;
    }());
    ContextMenuService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContextMenuService_Factory() { return new ContextMenuService(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i1.ScrollStrategyOptions), i0.ɵɵinject(i0.INJECTOR)); }, token: ContextMenuService, providedIn: "root" });
    ContextMenuService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    ContextMenuService.ctorParameters = function () { return [
        { type: i1.Overlay },
        { type: i1.ScrollStrategyOptions },
        { type: i0.Injector }
    ]; };

    var ContextMenuTriggerDirective = /** @class */ (function () {
        function ContextMenuTriggerDirective(contextMenuService) {
            this.contextMenuService = contextMenuService;
            this.holdToDisplay = 1000;
            this.menuAction = new i0.EventEmitter();
            this.menuClose = new i0.EventEmitter();
            this.beforeOpen = new i0.EventEmitter();
            this.visible = false;
        }
        ContextMenuTriggerDirective.prototype.handleMenu = function ($event) {
            var preventOpen = false;
            this.beforeOpen.emit({
                menuContext: this.menuContext,
                event: $event,
                preventOpen: function () {
                    preventOpen = true;
                },
            });
            if (preventOpen) {
                return;
            }
            $event.preventDefault();
            this.menu = this.contextMenuService.show($event, this.contextMenuTrigger, this.menuContext, this.menuClose, this.menuAction);
            this.visible = true;
        };
        ContextMenuTriggerDirective.prototype.handleMouseDown = function ($event) {
            var _this = this;
            if (this.holdToDisplay >= 0) {
                $event.stopPropagation();
                $event.clientY = $event.touches[0].clientY;
                $event.clientX = $event.touches[0].clientX;
                this.mouseDownTimeoutId = setTimeout(function () { return _this.handleMenu($event); }, this.holdToDisplay);
            }
        };
        ContextMenuTriggerDirective.prototype.handleMouseUp = function () {
            clearTimeout(this.mouseDownTimeoutId);
        };
        ContextMenuTriggerDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.sub = this.menuClose.subscribe(function () { return (_this.visible = false); });
        };
        ContextMenuTriggerDirective.prototype.ngOnDestroy = function () {
            this.sub.unsubscribe();
        };
        return ContextMenuTriggerDirective;
    }());
    ContextMenuTriggerDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[contextMenuTrigger]',
                    exportAs: 'contextMenuTrigger',
                },] }
    ];
    ContextMenuTriggerDirective.ctorParameters = function () { return [
        { type: ContextMenuService }
    ]; };
    ContextMenuTriggerDirective.propDecorators = {
        contextMenuTrigger: [{ type: i0.Input }],
        menuContext: [{ type: i0.Input }],
        holdToDisplay: [{ type: i0.Input }],
        menuAction: [{ type: i0.Output }],
        menuClose: [{ type: i0.Output }],
        beforeOpen: [{ type: i0.Output }],
        handleMenu: [{ type: i0.HostListener, args: ['contextmenu', ['$event'],] }],
        handleMouseDown: [{ type: i0.HostListener, args: ['touchstart', ['$event'],] }],
        handleMouseUp: [{ type: i0.HostListener, args: ['touchend',] }]
    };

    var ContextSubmenuTriggerDirective = /** @class */ (function () {
        function ContextSubmenuTriggerDirective(contextMenuService) {
            var _this = this;
            this.contextMenuService = contextMenuService;
            this.hoverDelay = 500;
            this.openDelay = 200;
            this.menuAction = new i0.EventEmitter();
            this.menuClose = new i0.EventEmitter();
            this.visible = false;
            this.level = 1;
            // get current level
            setTimeout(function () { return (_this.level = _this.contextMenuService.getCurrentLevel()); });
        }
        ContextSubmenuTriggerDirective.prototype.handleSubMenuClick = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            clearTimeout(this.opentimer);
            clearTimeout(this.closetimer);
            this.menu = this.contextMenuService.show($event, this.contextSubmenuTrigger, this.menuContext, this.menuClose, this.menuAction, true, this.level);
            this.visible = true;
        };
        ContextSubmenuTriggerDirective.prototype.handleSubMenuEnter = function ($event) {
            var _this = this;
            if (this.menu) {
                this.menu.isTriggerHovered.next(true);
            }
            clearTimeout(this.closetimer);
            this.opentimer = setTimeout(function () {
                _this.menu = _this.contextMenuService.show($event, _this.contextSubmenuTrigger, _this.menuContext, _this.menuClose, _this.menuAction, true, _this.level);
                _this.visible = true;
                _this.opentimer = null;
            }, this.openDelay);
        };
        /**
         * submenu hides after cursor has exited for a period of time
         */
        ContextSubmenuTriggerDirective.prototype.handleSubMenuExit = function () {
            var _this = this;
            clearTimeout(this.opentimer);
            if (this.menu) {
                this.menu.isTriggerHovered.next(false);
            }
            this.closetimer = setTimeout(function () {
                if (_this.menu) {
                    _this.menu.isTriggerHovered.next(false);
                    _this.contextMenuService.closeSubMenu(_this.menu.id);
                    _this.menu = undefined;
                }
                _this.visible = false;
            }, this.hoverDelay);
        };
        /**
         * if overwritten make sure to clear timeouts
         */
        ContextSubmenuTriggerDirective.prototype.ngOnDestroy = function () {
            clearTimeout(this.opentimer);
            clearTimeout(this.closetimer);
        };
        return ContextSubmenuTriggerDirective;
    }());
    ContextSubmenuTriggerDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[contextSubmenuTrigger]' },] }
    ];
    ContextSubmenuTriggerDirective.ctorParameters = function () { return [
        { type: ContextMenuService }
    ]; };
    ContextSubmenuTriggerDirective.propDecorators = {
        hoverDelay: [{ type: i0.Input }],
        openDelay: [{ type: i0.Input }],
        contextSubmenuTrigger: [{ type: i0.Input }],
        menuContext: [{ type: i0.Input }],
        menuAction: [{ type: i0.Output }],
        menuClose: [{ type: i0.Output }],
        handleSubMenuClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }],
        handleSubMenuEnter: [{ type: i0.HostListener, args: ['mouseover', ['$event'],] }],
        handleSubMenuExit: [{ type: i0.HostListener, args: ['mouseout',] }]
    };

    var MenuComponent = /** @class */ (function () {
        function MenuComponent(menuPackage, contextMenuService) {
            this.menuPackage = menuPackage;
            this.contextMenuService = contextMenuService;
            /** State of the dialog animation. */
            this._state = 'enter';
            this._animationDone = new rxjs.Subject();
            /** set lazy to False if you do not have animations */
            this.lazy = true;
        }
        MenuComponent.prototype.handleMouseover = function () {
            if (!this.menuPackage.menu.submenu) {
                return;
            }
            this.menuPackage.menu.isMenuHovered.next(true);
            clearTimeout(this.closetimer);
        };
        MenuComponent.prototype.handleMouseleave = function () {
            var _this = this;
            if (!this.menuPackage.menu.submenu) {
                return;
            }
            this.menuPackage.menu.isMenuHovered.next(false);
            this.closetimer = setTimeout(function () {
                _this.contextMenuService.closeSubMenu(_this.menuPackage.menu.id);
            }, 500);
        };
        MenuComponent.prototype.handleWindowClick = function ($event) {
            this.contextMenuService.checkOutsideClick($event);
        };
        /** Callback that is invoked when the menu animation completes. */
        MenuComponent.prototype._onAnimationDone = function (event) {
            this._animationDone.next(event);
        };
        return MenuComponent;
    }());
    MenuComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'app-menu',
                    template: ""
                },] }
    ];
    MenuComponent.ctorParameters = function () { return [
        { type: MenuPackage },
        { type: ContextMenuService }
    ]; };
    MenuComponent.propDecorators = {
        handleMouseover: [{ type: i0.HostListener, args: ['mouseover',] }],
        handleMouseleave: [{ type: i0.HostListener, args: ['mouseleave',] }],
        handleWindowClick: [{ type: i0.HostListener, args: ['document:click', ['$event'],] }],
        _onAnimationDone: [{ type: i0.HostListener, args: ['@menu.done', ['$event'],] }]
    };

    var ContextMenuModule = /** @class */ (function () {
        function ContextMenuModule() {
        }
        return ContextMenuModule;
    }());
    ContextMenuModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        ContextMenuTriggerDirective,
                        ContextSubmenuTriggerDirective,
                        MenuComponent,
                    ],
                    exports: [ContextMenuTriggerDirective, ContextSubmenuTriggerDirective],
                    imports: [portal.PortalModule, i1.OverlayModule],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ContextMenuModule = ContextMenuModule;
    exports.ContextMenuService = ContextMenuService;
    exports.ContextMenuTriggerDirective = ContextMenuTriggerDirective;
    exports.ContextSubmenuTriggerDirective = ContextSubmenuTriggerDirective;
    exports.MenuComponent = MenuComponent;
    exports.MenuInjector = MenuInjector;
    exports.MenuPackage = MenuPackage;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ctrl-ngx-rightclick.umd.js.map
