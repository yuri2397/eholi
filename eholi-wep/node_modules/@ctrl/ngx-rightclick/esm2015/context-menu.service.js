import { Overlay, ScrollStrategyOptions, } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { ElementRef, Injectable, Injector } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { MenuInjector } from './context-menu-injector';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
export class ContextMenuService {
    constructor(overlay, scrollStrategy, injector) {
        this.overlay = overlay;
        this.scrollStrategy = scrollStrategy;
        this.injector = injector;
        this.menus = [];
        this.id = 0;
    }
    /**
     *
     * @param $event triggering event
     * @param menuComponent the component to be shown
     * @param submenu is a menu within a menu
     * @param level if submenu, what level
     */
    show($event, menuComponent, context, menuClose, menuAction, submenu = false, level) {
        let target;
        if (!submenu) {
            this.closeAll();
            target = {
                getBoundingClientRect: () => ({
                    bottom: $event.clientY,
                    height: 0,
                    left: $event.clientX,
                    right: $event.clientX,
                    top: $event.clientY,
                    width: 0,
                }),
            };
        }
        else {
            // close other submenus
            this.closeAll(undefined, level);
            target = $event.target;
        }
        const el = new ElementRef(target);
        const positionStrategy = this.overlay
            .position()
            .flexibleConnectedTo(el)
            .withFlexibleDimensions(false);
        if (!submenu) {
            positionStrategy.withPositions([
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'top',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'bottom',
                },
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'top',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'top',
                },
                {
                    originX: 'end',
                    originY: 'center',
                    overlayX: 'start',
                    overlayY: 'center',
                },
                {
                    originX: 'start',
                    originY: 'center',
                    overlayX: 'end',
                    overlayY: 'center',
                },
            ]);
        }
        else {
            positionStrategy.withPositions([
                {
                    originX: 'end',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'top',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'end',
                    overlayY: 'top',
                },
                {
                    originX: 'end',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'bottom',
                },
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'end',
                    overlayY: 'bottom',
                },
            ]);
        }
        const t = {
            submenu,
            id: this.id++,
            isMenuHovered: new BehaviorSubject(false),
            isTriggerHovered: new BehaviorSubject(false),
        };
        const menuInjector = new MenuInjector(t, this.injector, context);
        const componentPortal = new ComponentPortal(menuComponent, undefined, menuInjector);
        const overlayRef = this.overlay.create({
            positionStrategy,
            panelClass: 'ngx-contextmenu',
            scrollStrategy: this.scrollStrategy.close(),
        });
        const component = overlayRef.attach(componentPortal);
        const res = Object.assign(Object.assign({ overlayRef, component }, t), { menuClose, menuAction });
        this.menus.push(res);
        return res;
    }
    getCurrentLevel() {
        return this.menus.length;
    }
    closeAll(context, idx = 0) {
        for (let index = idx; index < this.menus.length; index++) {
            const menu = this.menus[index];
            this.destroyMenu(menu, context);
        }
        this.menus.splice(idx, this.menus.length);
    }
    destroyMenu(menu, context) {
        menu.component.instance._state = 'exit';
        if (menu.component.instance.lazy) {
            menu.component.instance._animationDone
                .pipe(filter((event) => event.toState === 'exit'), take(1))
                .subscribe(() => {
                menu.overlayRef.detach();
                menu.overlayRef.dispose();
            });
        }
        else {
            menu.overlayRef.detach();
            menu.overlayRef.dispose();
        }
        if (context) {
            menu.menuAction.next(context);
        }
        menu.menuClose.next();
    }
    close(menu, menuIndex, context) {
        this.destroyMenu(menu, context);
        this.menus.splice(menuIndex, 1);
    }
    checkOutsideClick($event) {
        for (const m of this.menus) {
            const clickedInside = m.component.location.nativeElement.contains($event.target);
            if (clickedInside) {
                $event.preventDefault();
                $event.stopPropagation();
                return;
            }
        }
        this.closeAll();
    }
    closeSubMenu(id) {
        const menuIndex = this.menus.findIndex(n => n.id === id);
        if (menuIndex === -1 || menuIndex !== this.menus.length - 1) {
            return;
        }
        // make sure we can close the current menu
        const menu = this.menus[menuIndex];
        if (menu.isMenuHovered.getValue() || menu.isTriggerHovered.getValue()) {
            return;
        }
        // close all menus up if possible
        for (let index = this.menus.length - 1; index >= 1; index--) {
            const m = this.menus[index];
            if (!m.isMenuHovered.getValue() && !m.isTriggerHovered.getValue()) {
                this.close(m, index);
            }
            else {
                return;
            }
        }
    }
}
ContextMenuService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContextMenuService_Factory() { return new ContextMenuService(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i1.ScrollStrategyOptions), i0.ɵɵinject(i0.INJECTOR)); }, token: ContextMenuService, providedIn: "root" });
ContextMenuService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
ContextMenuService.ctorParameters = () => [
    { type: Overlay },
    { type: ScrollStrategyOptions },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,