export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../../../projects/angular-tree-component/src/lib/defs/api.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * Welcome to ng2tree\r\n */\r\nexport type IDType = string | number;\r\nexport type IDTypeDictionary = { [id: string]: boolean, [id: number]: boolean };\r\n\r\n/**\r\n * See ITreeNode for documentation\r\n */\r\nexport declare type TreeNode = any;\r\n\r\nexport interface IAllowDropFn {\r\n  (element: any, to: {parent: TreeNode, index: number}, $event?: any): boolean;\r\n}\r\n\r\nexport interface INodeHeightFn {\r\n  (node: TreeNode): number;\r\n}\r\n\r\nexport interface IAllowDragFn {\r\n  (node: TreeNode): boolean;\r\n}\r\n\r\n\r\nexport interface ITreeState {\r\n  expandedNodeIds?: IDTypeDictionary;\r\n  selectedNodeIds?: IDTypeDictionary;\r\n  activeNodeIds?: IDTypeDictionary;\r\n  hiddenNodeIds?: IDTypeDictionary;\r\n  selectedLeafNodeIds?: IDTypeDictionary;\r\n  focusedNodeId?: IDType;\r\n}\r\n\r\nexport interface ITreeOptions {\r\n   /**\r\n    * A string representing the attribute of the node that indicates whether there are child nodes.\r\n\r\n    * **Default value: `hasChildren`.**\r\n\r\n    For example, if your nodes have an `isDirectory` attribute that indicates whether there are children, use:\r\n    ```\r\n      options = { hasChildrenField: 'isDirectory' }\r\n    ```\r\n    */\r\n   hasChildrenField?: string;\r\n   /**\r\n    * A string representing the attribute of the node that contains the array of children.\r\n\r\n    * **Default value: `children`.**\r\n\r\n    For example, if your nodes have a `nodes` attribute, that contains the children, use:\r\n    ```\r\n      options = { childrenField: 'nodes' }\r\n    ```\r\n    */\r\n   childrenField?: string;\r\n   /**\r\n    * A string representing the attribute of the node to display.\r\n\r\n    * **Default value: `name`**\r\n\r\n      For example, if your nodes have a `title` attribute that should be displayed, use:\r\n      ```\r\n        options = { displayField: 'title' }\r\n      ```\r\n    */\r\n   displayField?: string;\r\n   /**\r\n    * A string representing the attribute of the node that contains the unique ID.\r\n      This will be used to construct the `path`, which is an array of IDs that point to the node.\r\n\r\n      * **Default value: `id`.**\r\n\r\n      For example, if your nodes have a `uuid` attribute, that contains the unique key, use:\r\n      ```\r\n        options = { idField: 'uuid' }\r\n      ```\r\n    */\r\n   idField?: string;\r\n   /**\r\n    * A string representing the attribute of the node that contains whether the node starts as expanded.\r\n\r\n      * **Default value: `isExpanded`.**\r\n\r\n      For example, if your nodes have an `expanded` attribute, that contains a boolean value, use:\r\n      ```\r\n        options = { isExpandedField: 'expanded' }\r\n      ```\r\n    */\r\n   isExpandedField?: string;\r\n   /**\r\n    * Function for loading a node's children.\r\n      The function receives a TreeNode, and returns a value or a promise that resolves to the node's children.\r\n\r\n      This function will be called whenever a node is expanded, the `hasChildren` (`options.hasChildrenField`)\r\n      field is true, and the `children` field is empty.\r\n      The result will be loaded into the node's children attribute.\r\n\r\n      Example:\r\n      ```\r\n      * options = {\r\n      *   getChildren: (node:TreeNode) => {\r\n      *     return request('/api/children/' + node.id);\r\n      *   }\r\n      * }\r\n      ```\r\n    */\r\n   getChildren?: (node: TreeNode) => any;\r\n   /**\r\n    * Rewire which trigger causes which action using this attribute, or create custom actions / event bindings.\r\n    * See the [Action Mapping Section](https://angular2-tree.readme.io/docs/action-mapping) for more details.\r\n    */\r\n   actionMapping?: any;\r\n   /**\r\n    * Specify if dragging tree nodes is allowed.\r\n    * This could be a boolean, or a function that receives a TreeNode and returns a boolean\r\n\r\n    * **Default value: false**\r\n\r\n    Example:\r\n    ```\r\n    * options = {\r\n    *  allowDrag: true\r\n    * }\r\n    ```\r\n    */\r\n   allowDrag?: boolean | IAllowDragFn;\r\n   /**\r\n    * Specify whether dropping inside the tree is allowed. Optional types:\r\n    *  - boolean\r\n    *  - (element:any, to:{parent:TreeNode, index:number}):boolean\r\n         A function that receives the dragged element, and the drop location (parent node and index inside the parent),\r\n         and returns true or false.\r\n\r\n    * **Default Value: true**\r\n\r\n    example:\r\n    ```\r\n    * options = {\r\n    *  allowDrop: (element, {parent, index}) => parent.isLeaf\r\n    * }\r\n    ```\r\n   */\r\n   allowDrop?: boolean | IAllowDropFn;\r\n    /**\r\n    Boolean flag to allow adding and removing is-dragging-over and is-dragging-over-disabled classes.\r\n\r\n    If set to false it will not add the above mentioned classes and you should handle the styling yourself with css and in\r\n    the actionMapping -> mouse -> dragEnter, dragLeave\r\n\r\n    * **Default Value: true**\r\n\r\n    example:\r\n    ```\r\n    * options = {\r\n    *   allowDrop: true,\r\n    *   allowDragoverStyling: false\r\n    * }\r\n    ```\r\n    */\r\n   allowDragoverStyling?: boolean;\r\n   /**\r\n   * Specify padding per node (integer).\r\n    Each node will have padding-left value of level * levelPadding, instead of using the default padding for children.\r\n\r\n    This option is good for example for allowing whole row selection, etc.\r\n\r\n    You can alternatively use the tree-node-level-X classes to give padding on a per-level basis.\r\n\r\n    * **Default value: 0**\r\n   */\r\n   levelPadding?: number;\r\n   /**\r\n    * Specify a function that returns a class per node. Useful for styling the nodes individually.\r\n\r\n      Example:\r\n      ```\r\n      * options = {\r\n      *   nodeClass: (node:TreeNode) => {\r\n      *     return 'icon-' + node.data.icon;\r\n      *   }\r\n      * }\r\n      ```\r\n    */\r\n   nodeClass?: (node: TreeNode) => string;\r\n   /**\r\n    Boolean flag to use the virtual scroll option.\r\n\r\n    To use this option, you must supply the height of the container, and the height of each node in the tree.\r\n\r\n    You can also specify height for the dropSlot which is located between nodes.\r\n\r\n    * **Default Value: false**\r\n\r\n    example:\r\n    ```\r\n    * options = {\r\n    *   useVirtualScroll: true,\r\n    *   nodeHeight: (node: TreeNode) => node.myHeight,\r\n    *   dropSlotHeight: 3\r\n    * }\r\n    ```\r\n    */\r\n   useVirtualScroll?: boolean;\r\n   /**\r\n    * For use with `useVirtualScroll` option.\r\n    * Specify a height for nodes in pixels. Could be either:\r\n    * - number\r\n    * - (node: TreeNode) => number\r\n\r\n    * **Default Value: 22**\r\n    */\r\n   nodeHeight?: number | INodeHeightFn;\r\n   /**\r\n    * For use with `useVirtualScroll` option.\r\n    * Specify a height for drop slots (located between nodes) in pixels\r\n\r\n    * **Default Value: 2**\r\n    */\r\n   dropSlotHeight?: number;\r\n   /**\r\n    * Boolean whether or not to animate expand / collapse of nodes.\r\n\r\n    * **Default Value: false**\r\n    */\r\n   animateExpand?: boolean;\r\n   /**\r\n    * Speed of expand animation (described in pixels per 17 ms).\r\n\r\n    * **Default Value: 30**\r\n    */\r\n   animateSpeed?: number;\r\n   /**\r\n    * Increase of expand animation speed (described in multiply per 17 ms).\r\n\r\n    * **Default Value: 1.2**\r\n    */\r\n   animateAcceleration?: number;\r\n   /**\r\n    * Whether to scroll to the node to make it visible when it is activated.\r\n\r\n    * **Default Value: true**\r\n    */\r\n   scrollOnActivate?: boolean;\r\n   /**\r\n    * Function to clone a node.\r\n    * Receives a TreeNode object, and returns a node object (only the data).\r\n    * This callback will be called when copying a node inside the tree,\r\n    * by either calling copyNode, or by dragging and holding the ctrl key\r\n    *\r\n    * For example:\r\n      ```\r\n        options: ITreeOptions = {\r\n          getNodeClone: (node) => ({\r\n            ...node.data,\r\n            id: uuid.v4(),\r\n            name: `copy of ${node.data.name}`\r\n          })\r\n        };\r\n      ```\r\n    *\r\n    * **Default Value: clone the node using Object.assign, and remove 'id' property**\r\n    */\r\n    getNodeClone?: (node: TreeNode) => any;\r\n    /**\r\n     * Makes the tree right-to-left.\r\n     * This include direction, expander style, and change key binding (right key collapse and left key expands instead of vice-versa)\r\n     */\r\n    rtl?: boolean;\r\n    /**\r\n     * Specifies id of root node (virtualRoot)\r\n     */\r\n    rootId?: any;\r\n    /**\r\n     * Whether to display a checkbox next to the node or not\r\n     */\r\n    useCheckbox?: boolean;\r\n    /**\r\n     * Whether to use master checkboxes mechanism if the useCheckbox is set to true\r\n     */\r\n    useTriState?: boolean;\r\n    /**\r\n     * The HTML element that is the scroll container for the tree.\r\n     * The default behaviour is to wrap the tree with a container that has overflow: hidden,\r\n     * and then the scrolling container is the viewport inside the tree component\r\n     */\r\n    scrollContainer?: HTMLElement;\r\n }\r\n\r\nexport interface ITreeNode {\r\n  // properties\r\n  /**\r\n   * Parent node\r\n   */\r\n  parent: ITreeNode;\r\n  /**\r\n   * The value of the node's field that is used for displaying its content.\r\n   * By default 'name', unless stated otherwise in the options\r\n   */\r\n  displayField: string;\r\n  /**\r\n   * The children of the node.\r\n   * By default is determined by 'node.data.children', unless stated otherwise in the options\r\n   */\r\n  children: ITreeNode[];\r\n  /**\r\n   * Pointer to the original data.\r\n   */\r\n  data: any;\r\n  /**\r\n   * Pointer to the ElementRef of the TreeNodeComponent that's displaying this node\r\n   */\r\n  elementRef: any;\r\n  /**\r\n   * Level in the tree (starts from 1).\r\n   */\r\n  level: number;\r\n  /**\r\n   * Path in the tree: Array of IDs.\r\n   */\r\n  path: string[];\r\n  /**\r\n   * index of the node inside its parent's children\r\n   */\r\n  index: number;\r\n  /**\r\n   * A unique key of this node among its siblings.\r\n   * By default it's the 'id' of the original node, unless stated otherwise in options.idField\r\n   */\r\n  id: IDType;\r\n\r\n  // helpers\r\n  isExpanded: boolean;\r\n  isActive: boolean;\r\n  isFocused: boolean;\r\n  isCollapsed: boolean;\r\n  isLeaf: boolean;\r\n  hasChildren: boolean;\r\n  isRoot: boolean;\r\n\r\n  // traversing\r\n  /**\r\n   * @param skipHidden whether to skip hidden nodes\r\n   * @returns next sibling (or null)\r\n   */\r\n  findNextSibling(skipHidden): ITreeNode;\r\n  /**\r\n   * @param skipHidden whether to skip hidden nodes\r\n   * @returns previous sibling (or null)\r\n   */\r\n  findPreviousSibling(skipHidden): ITreeNode;\r\n  /**\r\n   * @param skipHidden whether to skip hidden nodes\r\n   * @returns first child (or null)\r\n   */\r\n  getFirstChild(skipHidden): ITreeNode;\r\n  /**\r\n   * @param skipHidden whether to skip hidden nodes\r\n   * @returns last child (or null)\r\n   */\r\n  getLastChild(skipHidden): ITreeNode;\r\n  /**\r\n   * Finds the visually next node in the tree.\r\n   * @param goInside whether to look for children or just siblings\r\n   * @returns next node.\r\n   */\r\n  findNextNode(goInside: boolean): ITreeNode;\r\n  /**\r\n   * Finds the visually previous node in the tree.\r\n   * @param skipHidden whether to skip hidden nodes\r\n   * @returns previous node.\r\n   */\r\n  findPreviousNode(skipHidden): ITreeNode;\r\n\r\n  /**\r\n   * @returns      true if this node is a descendant of the parameter node\r\n   */\r\n  isDescendantOf(node: ITreeNode): boolean;\r\n\r\n  /**\r\n   * @returns      in case levelPadding option is supplied, returns the current node's padding\r\n   */\r\n  getNodePadding(): string;\r\n\r\n  /**\r\n   * @returns      in case nodeClass option is supplied, returns the current node's class\r\n   */\r\n  getClass(): string;\r\n\r\n  // actions\r\n  /**\r\n   * Expands / Collapses the node\r\n   */\r\n  toggleExpanded();\r\n  /**\r\n   * Expands the node\r\n   */\r\n  expand();\r\n  /**\r\n   * Collapses the node\r\n   */\r\n  collapse();\r\n  /**\r\n   * Expands all ancestors of the node\r\n   */\r\n  ensureVisible();\r\n  /**\r\n   * Activates / Deactivates the node (selects / deselects)\r\n   */\r\n  toggleActivated(multi);\r\n  /**\r\n   * Focus on the node\r\n   */\r\n  focus();\r\n  /**\r\n   * Blur (unfocus) the node\r\n   */\r\n  blur();\r\n  /**\r\n   * Hides the node\r\n   */\r\n  hide();\r\n  /**\r\n   * Makes the node visible\r\n   */\r\n  show();\r\n  /**\r\n   * @param value  if true makes the node hidden, otherwise visible\r\n   */\r\n  setIsHidden(value: boolean);\r\n  /**\r\n   * Scroll the screen to make the node visible\r\n   */\r\n  scrollIntoView();\r\n  /**\r\n   * Fire an event to the renderer of the tree (if it was registered)\r\n   */\r\n  fireEvent(event: any);\r\n  /**\r\n   * Invokes a method for every node under this one - depth first\r\n   * @param fn  a function that receives the node\r\n   */\r\n  doForAll(fn: (node: ITreeNode) => any);\r\n  /**\r\n   * expand all nodes under this one\r\n   */\r\n  expandAll();\r\n  /**\r\n   * collapse all nodes under this one\r\n   */\r\n  collapseAll();\r\n  /**\r\n   * sets the node to active / inactive according to the value.\r\n   * If multi is true (default false) - does a multiselect.\r\n   */\r\n  setIsActive(value: boolean, multi?: boolean);\r\n  /**\r\n   * sets the node to be active and makes sure it's visible by expanding all nodes above it and scrolling it into view.\r\n   * Very similar to calling `activate`, `ensureVisible` and `scrollIntoView` methods.\r\n   * If multi is true (default false) - does a multiselect.\r\n   */\r\n  setActiveAndVisible(multi: boolean);\r\n}\r\n\r\nexport interface ITreeModel {\r\n  // properties\r\n  /**\r\n   * All root nodes\r\n   */\r\n  roots: ITreeNode[];\r\n  /**\r\n   * Current focused node\r\n   */\r\n  focusedNode: ITreeNode;\r\n  /**\r\n   * Options that were passed to the tree component\r\n   */\r\n  options: ITreeOptions;\r\n\r\n  /**\r\n   * Is the tree currently focused\r\n   */\r\n  isFocused: boolean;\r\n  /**\r\n   * @returns Current active nodes\r\n   */\r\n  activeNodes: ITreeNode[];\r\n  /**\r\n   * @returns Current expanded nodes\r\n   */\r\n  expandedNodes: ITreeNode[];\r\n\r\n  // helpers\r\n  /**\r\n   * @returns Current active node. If multiple nodes are active - returns the first one.\r\n   */\r\n  getActiveNode(): ITreeNode;\r\n  /**\r\n   * @returns Current focused node (either hovered or traversed with keys)\r\n   */\r\n  getFocusedNode(): ITreeNode;\r\n  /**\r\n   * Set focus on a node\r\n   * @param value  true or false - whether to set focus or blur.\r\n   */\r\n  setFocusedNode(node: ITreeNode);\r\n  /**\r\n   * @param skipHidden  true or false - whether to skip hidden nodes\r\n   * @returns      first root of the tree\r\n   */\r\n  getFirstRoot(skipHidden?: boolean): ITreeNode;\r\n  /**\r\n   * @param skipHidden  true or false - whether to skip hidden nodes\r\n   * @returns      last root of the tree\r\n   */\r\n  getLastRoot(skipHidden?: boolean): ITreeNode;\r\n  /**\r\n   * @returns      true if the tree is empty\r\n   */\r\n  isEmptyTree(): boolean;\r\n  /**\r\n   * @returns All root nodes that pass the current filter\r\n   */\r\n  getVisibleRoots(): ITreeNode[];\r\n  /**\r\n   * @param     path  array of node IDs to be traversed respectively\r\n   * @param     startNode  optional. Which node to start traversing from\r\n   * @returns   The node, if found - null otherwise\r\n   */\r\n  getNodeByPath(path: any[], startNode?: ITreeNode): ITreeNode;\r\n  /**\r\n   * @param     id  node ID to find\r\n   * @returns   The node, if found - null otherwise\r\n   */\r\n  getNodeById(id: IDType): ITreeNode;\r\n  /**\r\n   * @param     predicate - either an object or a function, used as a test condition on all nodes.\r\n   *            Could be every predicate that's supported by javaScripts Array.prototype.find() method\r\n   * @param     startNode  optional. Which node to start traversing from\r\n   * @returns   First node that matches the predicate, if found - null otherwise\r\n   */\r\n  getNodeBy(predicate: any, startNode?: ITreeNode): ITreeNode;\r\n  /**\r\n   * get tree state\r\n   */\r\n  getState(): ITreeState;\r\n\r\n  // actions\r\n  /**\r\n   * Focuses or blurs the tree\r\n   * @param value  true or false - whether to set focus or blur.\r\n   */\r\n  setFocus(value: boolean);\r\n  /**\r\n   * Focuses on the next node in the tree (same as down arrow)\r\n   */\r\n  focusNextNode();\r\n  /**\r\n   * Focuses on the previous node in the tree (same as up arrow)\r\n   */\r\n  focusPreviousNode();\r\n  /**\r\n   * Focuses on the inner child of the current focused node (same as right arrow on an expanded node)\r\n   */\r\n  focusDrillDown();\r\n  /**\r\n   * Focuses on the parent of the current focused node (same as left arrow on a collapsed node)\r\n   */\r\n  focusDrillUp();\r\n  /**\r\n   * Marks isHidden field in all nodes recursively according to the filter param.\r\n   * If a node is marked visible, all of its ancestors will be marked visible as well.\r\n   * @param filter  either a string or a function.\r\n   *   In case it's a string, it will be searched case insensitively in the node's display attribute\r\n   *   In case it's a function, it will be passed the node, and should return true if the node should be visible, false otherwise\r\n   * @param autoShow  if true, make sure all nodes that passed the filter are visible\r\n   */\r\n  filterNodes(filter, autoShow?: boolean);\r\n  /**\r\n   * Marks all nodes isHidden = false\r\n   */\r\n  clearFilter();\r\n  /**\r\n   * moves a node from one location in the tree to another\r\n   * @param node describes which node needs to be moved\r\n   * @param to describes where to move the node to.\r\n   * @param from describes where to move the node from.\r\n   * Contains a 'parent' node, an 'index', and a 'dropOnNode' - to distinguish between dropping between nodes or on the node\r\n   */\r\n  moveNode(node: ITreeNode, to: {parent: ITreeNode, index: number, dropOnNode: boolean}, from: {parent: ITreeNode, index: number});\r\n  /**\r\n   * Invokes a method for every node of the tree - depth first\r\n   * @param fn  a function that receives the node\r\n   */\r\n  doForAll(fn: (node: ITreeNode) => any);\r\n  /**\r\n   * expand all nodes\r\n   */\r\n  expandAll();\r\n  /**\r\n   * collapse all nodes\r\n   */\r\n  collapseAll();\r\n  /**\r\n   * set tree state\r\n   */\r\n  setState(state: ITreeState);\r\n\r\n  subscribeToState(fn: (state: ITreeState) => any);\r\n}\r\n/**\r\n * This is the interface of the TreeNodeDrag service\r\n */\r\nexport interface ITreeNodeDrag {\r\n  /**\r\n   * Gets the current dragged node. Useful for overriding the drop action.\r\n   * @param node  The parent node of the current dragged node\r\n   * @param index  The index inside parent's children, of the current dragged node\r\n   */\r\n  getDragNode(): { node: TreeNode, index: number };\r\n}\r\n"]}