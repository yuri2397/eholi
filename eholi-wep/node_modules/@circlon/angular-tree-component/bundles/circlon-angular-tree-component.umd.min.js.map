{"version":3,"sources":["../../../projects/angular-tree-component/src/lib/mobx-angular/tree-mobx-autorun.directive.ts","../../../projects/angular-tree-component/src/lib/constants/keys.ts","../../../projects/angular-tree-component/src/lib/models/tree-options.model.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/angular-tree-component/src/lib/constants/events.ts","../../../projects/angular-tree-component/src/lib/models/tree-node.model.ts","../../../projects/angular-tree-component/src/lib/models/tree.model.ts","../../../projects/angular-tree-component/src/lib/models/tree-dragged-element.model.ts","../../../projects/angular-tree-component/src/lib/models/tree-virtual-scroll.model.ts","../../../projects/angular-tree-component/src/lib/components/loading.component.ts","../../../projects/angular-tree-component/src/lib/components/tree.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-content.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-drop-slot.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-expander.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-children.component.ts","../../../projects/angular-tree-component/src/lib/mobx-angular/mobx-proxy.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-collection.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-wrapper.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-viewport.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-checkbox.component.ts","../../../projects/angular-tree-component/src/lib/directives/tree-drop.directive.ts","../../../projects/angular-tree-component/src/lib/directives/tree-drag.directive.ts","../../../projects/angular-tree-component/src/lib/directives/tree-animate-open.directive.ts","../../../projects/angular-tree-component/src/lib/angular-tree-component.module.ts"],"names":["TreeMobxAutorunDirective","templateRef","viewContainer","this","templateBindings","prototype","ngOnInit","view","createEmbeddedView","dispose","shouldDetach","detach","autoDetect","treeMobxAutorun","autorun","detectChanges","ngOnDestroy","Directive","args","selector","TemplateRef","ViewContainerRef","Input","KEYS","LEFT","UP","RIGHT","DOWN","ENTER","SPACE","CONTEXT_MENU","TREE_ACTIONS","TOGGLE_ACTIVE","tree","node","$event","toggleActivated","TOGGLE_ACTIVE_MULTI","TOGGLE_SELECTED","toggleSelected","ACTIVATE","setIsActive","DEACTIVATE","SELECT","setIsSelected","DESELECT","FOCUS","focus","TOGGLE_EXPANDED","hasChildren","toggleExpanded","EXPAND","expand","COLLAPSE","collapse","DRILL_DOWN","focusDrillDown","DRILL_UP","focusDrillUp","NEXT_NODE","focusNextNode","PREVIOUS_NODE","focusPreviousNode","MOVE_NODE","_36","from","to","ctrlKey","copyNode","moveNode","defaultActionMapping","mouse","click","dblClick","contextMenu","expanderClick","checkboxClick","drop","keys","TreeOptions","options","actionMapping","_d","_c","_b","_a","_h","_g","_f","_e","_m","_l","_k","_j","_r","_q","_p","_o","_v","_u","_t","_s","_z","_y","_x","_w","dragStart","_3","_2","_1","_0","undefined","drag","_7","_6","_5","_4","dragEnd","_11","_10","_9","_8","dragOver","_15","_14","_13","_12","dragLeave","_19","_18","_17","_16","dragEnter","_23","_22","_21","_20","mouseOver","_27","_26","_25","_24","mouseOut","_31","_30","_29","_28","_33","_32","Object","assign","rtl","_34","_35","defineProperty","hasChildrenField","childrenField","displayField","idField","isExpandedField","getChildren","levelPadding","useVirtualScroll","animateExpand","animateSpeed","animateAcceleration","scrollOnActivate","rootId","useCheckbox","useTriState","scrollContainer","allowDragoverStyling","getNodeClone","nodeClone","data","id","allowDrop","element","Function","allowDrag","nodeClass","nodeHeight","virtual","index","dropSlotHeight","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","TREE_EVENTS","activate","deactivate","nodeActivate","nodeDeactivate","select","deselect","blur","initialized","updateData","event","loadNodeChildren","changeFilter","stateChange","TreeNode","parent","treeModel","_this","position","Math","floor","random","getField","_initChildren","autoLoadChildren","isHidden","isExpanded","isActive","isNodeFocused","isSelectable","isSelected","children","some","every","isAllSelected","level","path","_originalNode","isRoot","fireEvent","setField","key","_findAdjacentSibling","steps","skipHidden","siblings","_getParentsChildren","indexOf","findNextSibling","findPreviousSibling","getVisibleChildren","visibleChildren","filter","getFirstChild","getLastChild","findNextNode","goInside","findPreviousNode","previousSibling","_getLastOpenDescendant","realParent","lastChild","isCollapsed","getIndexInParent","isDescendantOf","getNodePadding","getClass","join","onDrop","mouseAction","dropOnNode","Promise","resolve","then","forEach","child","eventName","doForAll","fn","expandAll","collapseAll","ensureVisible","setIsExpanded","setExpandedNode","handler","reaction","fireImmediately","multi","setActiveNode","isLeaf","setSelectedNode","setActiveAndVisible","setTimeout","scrollIntoView","bind","force","virtualScroll","scroll","previousNode","getFocusedNode","setFocusedNode","setIsHidden","hide","show","actionName","setFocus","getSelfHeight","map","c","__decorate","computed","observable","action","TreeModel","eventNames","expandedNodeIds","selectedLeafNodeIds","activeNodeIds","hiddenNodeIds","focusedNodeId","firstUpdate","subscriptions","events","emit","subscribe","subscription","focusedNode","getActiveNode","activeNodes","getActiveNodes","getVisibleRoots","virtualRoot","getFirstRoot","root","roots","getLastRoot","focusedTree","isEmptyTree","getNodeById","Boolean","getNodeByPath","startNode","childId","shift","childNode","find","idStr","toString","getNodeBy","predicate","found","foundInChildren","unsubscribeAll","unsubscribe","setData","nodes","update","virtualRootConfig","_calculateExpandedNodes","nextNode","_setActiveNodeMulti","_setActiveNodeSingle","setHiddenNodeIds","nodeIds","reduce","performKeyAction","keyAction","keyCode","preventDefault","filterNodes","autoShow","filterFn","clearFilter","valueOf","toLowerCase","console","ids","_filterNode","fromIndex","fromParent","canMoveNode","fromChildren","toChildren","originalNode","splice","toIndex","nodeCopy","getState","setState","state","subscribeToState","calculateExpandedNodes","isVisible","activeNode","Injectable","TreeDraggedElement","_draggedElement","set","draggedElement","get","isDragging","providedIn","Y_EPSILON","TreeVirtualScroll","yBlocks","x","viewportHeight","viewport","_dispose","fixScroll","height","init","recalcPositions","isEnabled","_setYBlocks","_getPositionAfter","startPos","_getPositionAfterNode","clear","d","setViewport","scrollLeft","round","scrollTop","getBoundingClientRect","scrollToMiddle","scrollContainerHeight","scrollContainerTop","top","nodeTop","y","getViewportNodes","visibleNodes","lastVisibleNode","slice","firstIndex","binarySearch","lastIndex","viewportNodes","maxY","max","totalHeight","condition","midIndex","Component","encapsulation","ViewEncapsulation","None","template","TreeComponent","treeDraggedElement","name","EventEmitter","onKeydown","isFocused","includes","document","activeElement","tagName","onMousedown","isOutsideClick","startElement","nodeName","localName","parentElement","target","ngOnChanges","changes","currentValue","pick","sizeChanged","viewportComponent","object","obj","hasOwnProperty","providers","ContentChild","static","ViewChild","Output","HostListener","TreeNodeDropSlot","dropIndex","actionInternal","_i","mobxAction","apply","mobxComputed","mobxObservable","TreeNodeCollectionComponent","_nodes","setNodes","firstNode","nodeIndexes","compareStructural","trackNode","TreeViewportComponent","elementRef","throttle","nativeElement","scrollEventHandler","ngAfterViewInit","addEventListener","removeEventListener","getTotalHeight","func","timeFrame","lastTime","now","Date","ElementRef","DRAG_OVER_CLASS","DRAG_DISABLED_CLASS","TreeDropDirective","el","renderer","ngZone","onDropCallback","onDragOverCallback","onDragLeaveCallback","onDragEnterCallback","_allowDrop","dragOverEventHandler","onDragOver","dragEnterEventHandler","onDragEnter","dragLeaveEventHandler","onDragLeave","runOutsideAngular","addDisabledClass","addClass","removeDisabledClass","removeClass","Renderer2","NgZone","TreeDragDirective","dragEventHandler","onDrag","ngDoCheck","setAttribute","treeDragEnabled","onDragStart","ev","dataTransfer","onDragEnd","TreeAnimateOpenDirective","viewContainerRef","_show","_isOpen","_animateOpen","_animateClose","_hide","innerElement","rootNodes","delta","ease","maxHeight","setStyle","setInterval","clearInterval","roundedMaxHeight","NgModule","declarations","TreeNodeComponent","TreeNodeContent","LoadingComponent","TreeNodeExpanderComponent","TreeNodeChildrenComponent","TreeNodeWrapperComponent","TreeNodeCheckboxComponent","exports","imports","CommonModule"],"mappings":"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","sourcesContent":["import {\r\n  Directive,\r\n  ViewContainerRef,\r\n  TemplateRef,\r\n  OnInit,\r\n  OnDestroy,\r\n  Input,\r\n  EmbeddedViewRef\r\n} from '@angular/core';\r\nimport { autorun } from 'mobx';\r\n\r\n@Directive({ selector: '[treeMobxAutorun]' })\r\nexport class TreeMobxAutorunDirective implements OnInit, OnDestroy {\r\n  protected templateBindings = {};\r\n  protected dispose: any;\r\n  protected view: EmbeddedViewRef<any>;\r\n  @Input() treeMobxAutorun;\r\n\r\n  constructor(\r\n    protected templateRef: TemplateRef<any>,\r\n    protected viewContainer: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.view = this.viewContainer.createEmbeddedView(this.templateRef);\r\n\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n\r\n    if (this.shouldDetach()) {\r\n      this.view.detach();\r\n    }\r\n    this.autoDetect(this.view);\r\n  }\r\n\r\n  shouldDetach() {\r\n    return this.treeMobxAutorun && this.treeMobxAutorun.detach;\r\n  }\r\n\r\n  autoDetect(view: EmbeddedViewRef<any>) {\r\n    this.dispose = autorun(() => view.detectChanges());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n  }\r\n}\r\n","export const KEYS = {\r\n  LEFT: 37,\r\n  UP: 38,\r\n  RIGHT: 39,\r\n  DOWN: 40,\r\n  ENTER: 13,\r\n  SPACE: 32,\r\n  CONTEXT_MENU: 32\r\n};\r\n","import { TreeNode } from './tree-node.model';\r\nimport { TreeModel } from './tree.model';\r\nimport { KEYS } from '../constants/keys';\r\nimport { ITreeOptions } from '../defs/api';\r\n\r\nexport interface IActionHandler {\r\n  (tree: TreeModel, node: TreeNode, $event: any, ...rest);\r\n}\r\n\r\nexport const TREE_ACTIONS = {\r\n  TOGGLE_ACTIVE: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(),\r\n  TOGGLE_ACTIVE_MULTI: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(true),\r\n  TOGGLE_SELECTED: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleSelected(),\r\n  ACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(true),\r\n  DEACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(false),\r\n  SELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(true),\r\n  DESELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(false),\r\n  FOCUS: (tree: TreeModel, node: TreeNode, $event: any) => node.focus(),\r\n  TOGGLE_EXPANDED: (tree: TreeModel, node: TreeNode, $event: any) => node.hasChildren && node.toggleExpanded(),\r\n  EXPAND: (tree: TreeModel, node: TreeNode, $event: any) => node.expand(),\r\n  COLLAPSE: (tree: TreeModel, node: TreeNode, $event: any) => node.collapse(),\r\n  DRILL_DOWN: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillDown(),\r\n  DRILL_UP: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillUp(),\r\n  NEXT_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusNextNode(),\r\n  PREVIOUS_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusPreviousNode(),\r\n  MOVE_NODE: (tree: TreeModel, node: TreeNode, $event: any, {from , to}: {from: any, to: any}) => {\r\n    // default action assumes from = node, to = {parent, index}\r\n    if ($event.ctrlKey) {\r\n      tree.copyNode(from, to);\r\n    } else {\r\n      tree.moveNode(from, to);\r\n    }\r\n  }\r\n};\r\n\r\nconst defaultActionMapping: IActionMapping = {\r\n  mouse: {\r\n    click: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    dblClick: null,\r\n    contextMenu: null,\r\n    expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\r\n    checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\r\n    drop: TREE_ACTIONS.MOVE_NODE\r\n  },\r\n  keys: {\r\n    [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n    [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n    [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n    [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n    [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n  }\r\n};\r\n\r\nexport interface IActionMapping {\r\n  mouse?: {\r\n    click?: IActionHandler,\r\n    dblClick?: IActionHandler,\r\n    contextMenu?: IActionHandler,\r\n    expanderClick?: IActionHandler,\r\n    checkboxClick?: IActionHandler,\r\n    dragStart?: IActionHandler,\r\n    drag?: IActionHandler,\r\n    dragEnd?: IActionHandler,\r\n    dragOver?: IActionHandler,\r\n    dragLeave?: IActionHandler,\r\n    dragEnter?: IActionHandler,\r\n    drop?: IActionHandler,\r\n    mouseOver?: IActionHandler,\r\n    mouseOut?: IActionHandler\r\n  };\r\n  keys?: {\r\n    [key: number]: IActionHandler\r\n  };\r\n}\r\n\r\nexport class TreeOptions {\r\n  get hasChildrenField(): string { return this.options.hasChildrenField || 'hasChildren'; }\r\n  get childrenField(): string { return this.options.childrenField || 'children'; }\r\n  get displayField(): string { return this.options.displayField || 'name'; }\r\n  get idField(): string { return this.options.idField || 'id'; }\r\n  get isExpandedField(): string { return this.options.isExpandedField || 'isExpanded'; }\r\n  get getChildren(): any { return this.options.getChildren; }\r\n  get levelPadding(): number { return this.options.levelPadding || 0; }\r\n  get useVirtualScroll(): boolean { return this.options.useVirtualScroll; }\r\n  get animateExpand(): boolean { return this.options.animateExpand; }\r\n  get animateSpeed(): number { return this.options.animateSpeed || 1; }\r\n  get animateAcceleration(): number { return this.options.animateAcceleration || 1.2; }\r\n  get scrollOnActivate(): boolean { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }\r\n  get rtl(): boolean { return !!this.options.rtl; }\r\n  get rootId(): any {return this.options.rootId; }\r\n  get useCheckbox(): boolean { return this.options.useCheckbox; }\r\n  get useTriState(): boolean { return this.options.useTriState === undefined ? true : this.options.useTriState; }\r\n  get scrollContainer(): HTMLElement { return this.options.scrollContainer; }\r\n  get allowDragoverStyling(): boolean { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }\r\n  actionMapping: IActionMapping;\r\n\r\n  constructor(private options: ITreeOptions = {}) {\r\n    this.actionMapping = {\r\n      mouse: {\r\n        click: this.options?.actionMapping?.mouse?.click ?? defaultActionMapping.mouse.click,\r\n        dblClick: this.options?.actionMapping?.mouse?.dblClick ?? defaultActionMapping.mouse.dblClick,\r\n        contextMenu: this.options?.actionMapping?.mouse?.contextMenu ?? defaultActionMapping.mouse.contextMenu,\r\n        expanderClick: this.options?.actionMapping?.mouse?.expanderClick ?? defaultActionMapping.mouse.expanderClick,\r\n        checkboxClick: this.options?.actionMapping?.mouse?.checkboxClick ?? defaultActionMapping.mouse.checkboxClick,\r\n        drop: this.options?.actionMapping?.mouse?.drop ?? defaultActionMapping.mouse.drop,\r\n        dragStart: this.options?.actionMapping?.mouse?.dragStart ?? undefined,\r\n        drag: this.options?.actionMapping?.mouse?.drag ?? undefined,\r\n        dragEnd: this.options?.actionMapping?.mouse?.dragEnd ?? undefined,\r\n        dragOver: this.options?.actionMapping?.mouse?.dragOver ?? undefined,\r\n        dragLeave: this.options?.actionMapping?.mouse?.dragLeave ?? undefined,\r\n        dragEnter: this.options?.actionMapping?.mouse?.dragEnter ?? undefined,\r\n        mouseOver: this.options?.actionMapping?.mouse?.mouseOver ?? undefined,\r\n        mouseOut: this.options?.actionMapping?.mouse?.mouseOut ?? undefined,\r\n      },\r\n      keys: {\r\n        [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n        [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n        [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n        [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n        [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n        [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n      }\r\n    }\r\n\r\n    if (this.options?.actionMapping?.keys) {\r\n      this.actionMapping.keys = {\r\n        ...this.actionMapping.keys,\r\n        ...this.options.actionMapping.keys\r\n      }\r\n    }\r\n\r\n    if (options.rtl) {\r\n      this.actionMapping.keys[KEYS.RIGHT] = <IActionHandler>options.actionMapping?.keys[KEYS.RIGHT] || TREE_ACTIONS.DRILL_UP;\r\n      this.actionMapping.keys[KEYS.LEFT] = <IActionHandler>options.actionMapping?.keys[KEYS.LEFT] || TREE_ACTIONS.DRILL_DOWN;\r\n    }\r\n  }\r\n\r\n  getNodeClone(node: TreeNode): any {\r\n    if (this.options.getNodeClone) {\r\n      return this.options.getNodeClone(node);\r\n    }\r\n\r\n    // remove id from clone\r\n    // keeping ie11 compatibility\r\n    const nodeClone = Object.assign({}, node.data);\r\n    if (nodeClone.id) {\r\n      delete nodeClone.id;\r\n    }\r\n    return nodeClone;\r\n  }\r\n\r\n  allowDrop(element, to, $event?): boolean {\r\n    if (this.options.allowDrop instanceof Function) {\r\n      return this.options.allowDrop(element, to, $event);\r\n    }\r\n    else {\r\n      return this.options.allowDrop === undefined ? true : this.options.allowDrop;\r\n    }\r\n  }\r\n\r\n  allowDrag(node: TreeNode): boolean {\r\n    if (this.options.allowDrag instanceof Function) {\r\n      return this.options.allowDrag(node);\r\n    } else {\r\n      return this.options.allowDrag;\r\n    }\r\n  }\r\n\r\n  nodeClass(node: TreeNode): string {\r\n    return this.options.nodeClass ? this.options.nodeClass(node) : '';\r\n  }\r\n\r\n  nodeHeight(node: TreeNode): number {\r\n    if (node.data.virtual) {\r\n      return 0;\r\n    }\r\n\r\n    let nodeHeight = this.options.nodeHeight || 22;\r\n\r\n    if (typeof nodeHeight === 'function') {\r\n      nodeHeight = nodeHeight(node);\r\n    }\r\n\r\n    // account for drop slots:\r\n    return nodeHeight + (node.index === 0 ?  2 : 1) * this.dropSlotHeight;\r\n  }\r\n\r\n  get dropSlotHeight(): number {\r\n    return typeof this.options.dropSlotHeight === 'number' ? this.options.dropSlotHeight : 2;\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export const TREE_EVENTS = {\r\n  toggleExpanded: 'toggleExpanded',\r\n  activate: 'activate',\r\n  deactivate: 'deactivate',\r\n  nodeActivate: 'nodeActivate',\r\n  nodeDeactivate: 'nodeDeactivate',\r\n  select: 'select',\r\n  deselect: 'deselect',\r\n  focus: 'focus',\r\n  blur: 'blur',\r\n  initialized: 'initialized',\r\n  updateData: 'updateData',\r\n  moveNode: 'moveNode',\r\n  copyNode: 'copyNode',\r\n  event: 'event',\r\n  loadNodeChildren: 'loadNodeChildren',\r\n  changeFilter: 'changeFilter',\r\n  stateChange: 'stateChange'\r\n};\r\n","import { observable, computed, reaction, autorun, action, IReactionDisposer } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { ITreeNode } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nexport class TreeNode implements ITreeNode {\r\n  private handler: IReactionDisposer;\r\n  @computed get isHidden() { return this.treeModel.isHidden(this); };\r\n  @computed get isExpanded() { return this.treeModel.isExpanded(this); };\r\n  @computed get isActive() { return this.treeModel.isActive(this); };\r\n  @computed get isFocused() { return this.treeModel.isNodeFocused(this); };\r\n  @computed get isSelected() {\r\n    if (this.isSelectable()) {\r\n        return this.treeModel.isSelected(this);\r\n    } else {\r\n      return this.children.some((node: TreeNode) => node.isSelected);\r\n    }\r\n  };\r\n  @computed get isAllSelected() {\r\n    if (this.isSelectable()) {\r\n      return this.treeModel.isSelected(this);\r\n    } else {\r\n      return this.children.every((node: TreeNode) => node.isAllSelected);\r\n    }\r\n  };\r\n  @computed get isPartiallySelected() {\r\n    return this.isSelected && !this.isAllSelected;\r\n  }\r\n\r\n  @observable children: TreeNode[];\r\n  @observable index: number;\r\n  @observable position = 0;\r\n  @observable height: number;\r\n  @computed get level(): number {\r\n    return this.parent ? this.parent.level + 1 : 0;\r\n  }\r\n  @computed get path(): string[] {\r\n    return this.parent ? [...this.parent.path, this.id] : [];\r\n  }\r\n\r\n  get elementRef(): any {\r\n    throw `Element Ref is no longer supported since introducing virtual scroll\\n\r\n      You may use a template to obtain a reference to the element`;\r\n  }\r\n\r\n  private _originalNode: any;\r\n  get originalNode() { return this._originalNode; };\r\n\r\n  constructor(public data: any, public parent: TreeNode, public treeModel: TreeModel, index: number) {\r\n    if (this.id === undefined || this.id === null) {\r\n      this.id = uuid();\r\n    } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\r\n    this.index = index;\r\n\r\n    if (this.getField('children')) {\r\n      this._initChildren();\r\n    }\r\n    this.autoLoadChildren();\r\n  }\r\n\r\n  // helper get functions:\r\n  get hasChildren(): boolean {\r\n    return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));\r\n  }\r\n  get isCollapsed(): boolean { return !this.isExpanded; }\r\n  get isLeaf(): boolean { return !this.hasChildren; }\r\n  get isRoot(): boolean { return this.parent.data.virtual; }\r\n  get realParent(): TreeNode { return this.isRoot ? null : this.parent; }\r\n\r\n  // proxy functions:\r\n  get options(): TreeOptions { return this.treeModel.options; }\r\n  fireEvent(event) { this.treeModel.fireEvent(event); }\r\n\r\n  // field accessors:\r\n  get displayField() {\r\n    return this.getField('display');\r\n  }\r\n\r\n  get id() {\r\n    return this.getField('id');\r\n  }\r\n\r\n  set id(value) {\r\n    this.setField('id', value);\r\n  }\r\n\r\n  getField(key) {\r\n    return this.data[this.options[`${key}Field`]];\r\n  }\r\n\r\n  setField(key, value) {\r\n    this.data[this.options[`${key}Field`]] = value;\r\n  }\r\n\r\n  // traversing:\r\n  _findAdjacentSibling(steps, skipHidden = false) {\r\n    const siblings = this._getParentsChildren(skipHidden);\r\n    const index = siblings.indexOf(this);\r\n\r\n    return siblings.length > index + steps ? siblings[index + steps] : null;\r\n  }\r\n\r\n  findNextSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(+1, skipHidden);\r\n  }\r\n\r\n  findPreviousSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(-1, skipHidden);\r\n  }\r\n\r\n  getVisibleChildren() {\r\n    return this.visibleChildren;\r\n  }\r\n\r\n  @computed get visibleChildren() {\r\n    return (this.children || []).filter((node) => !node.isHidden);\r\n  }\r\n\r\n  getFirstChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return children != null && children.length ? children[0] : null;\r\n  }\r\n\r\n  getLastChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return children != null && children.length ? children[children.length - 1] : null;\r\n  }\r\n\r\n  findNextNode(goInside = true, skipHidden = false) {\r\n    return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||\r\n           this.findNextSibling(skipHidden) ||\r\n           this.parent && this.parent.findNextNode(false, skipHidden);\r\n  }\r\n\r\n  findPreviousNode(skipHidden = false) {\r\n    let previousSibling = this.findPreviousSibling(skipHidden);\r\n    if (!previousSibling) {\r\n      return this.realParent;\r\n    }\r\n    return previousSibling._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  _getLastOpenDescendant(skipHidden = false) {\r\n    const lastChild = this.getLastChild(skipHidden);\r\n    return (this.isCollapsed || !lastChild)\r\n      ? this\r\n      : lastChild._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  private _getParentsChildren(skipHidden = false): any[] {\r\n    const children = this.parent &&\r\n      (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\r\n\r\n    return children || [];\r\n  }\r\n\r\n  private getIndexInParent(skipHidden = false) {\r\n    return this._getParentsChildren(skipHidden).indexOf(this);\r\n  }\r\n\r\n  isDescendantOf(node: TreeNode) {\r\n    if (this === node) return true;\r\n    else return this.parent && this.parent.isDescendantOf(node);\r\n  }\r\n\r\n  getNodePadding(): string {\r\n    return this.options.levelPadding * (this.level - 1) + 'px';\r\n  }\r\n\r\n  getClass(): string {\r\n    return [this.options.nodeClass(this), `tree-node-level-${ this.level }`].join(' ');\r\n  }\r\n\r\n  onDrop($event) {\r\n    this.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this, index: 0, dropOnNode: true }\r\n    });\r\n  }\r\n\r\n  allowDrop = (element, $event?) => {\r\n    return this.options.allowDrop(element, { parent: this, index: 0 }, $event);\r\n  }\r\n\r\n  allowDragoverStyling = () => {\r\n    return this.options.allowDragoverStyling;\r\n  }\r\n\r\n  allowDrag() {\r\n    return this.options.allowDrag(this);\r\n  }\r\n\r\n\r\n  // helper methods:\r\n  loadNodeChildren() {\r\n    if (!this.options.getChildren) {\r\n      return Promise.resolve(); // Not getChildren method - for using redux\r\n    }\r\n    return Promise.resolve(this.options.getChildren(this))\r\n      .then((children) => {\r\n        if (children) {\r\n          this.setField('children', children);\r\n          this._initChildren();\r\n          if (this.options.useTriState && this.treeModel.isSelected(this)) {\r\n            this.setIsSelected(true);\r\n          }\r\n          this.children.forEach((child) => {\r\n            if (child.getField('isExpanded') && child.hasChildren) {\r\n              child.expand();\r\n            }\r\n          });\r\n      }}).then(() => {\r\n        this.fireEvent({\r\n          eventName: TREE_EVENTS.loadNodeChildren,\r\n          node: this\r\n        });\r\n      });\r\n  }\r\n\r\n  expand() {\r\n    if (!this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  collapse() {\r\n    if (this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  doForAll(fn: (node: ITreeNode) => any) {\r\n    Promise.resolve(fn(this)).then(() => {\r\n      if (this.children) {\r\n        this.children.forEach((child) => child.doForAll(fn));\r\n      }\r\n    });\r\n  }\r\n\r\n  expandAll() {\r\n    this.doForAll((node) => node.expand());\r\n  }\r\n\r\n  collapseAll() {\r\n    this.doForAll((node) => node.collapse());\r\n  }\r\n\r\n  ensureVisible() {\r\n    if (this.realParent) {\r\n      this.realParent.expand();\r\n      this.realParent.ensureVisible();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleExpanded() {\r\n    this.setIsExpanded(!this.isExpanded);\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsExpanded(value) {\r\n    if (this.hasChildren) {\r\n      this.treeModel.setExpandedNode(this, value);\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  autoLoadChildren() {\r\n    this.handler =\r\n      reaction(\r\n        () => this.isExpanded,\r\n        (isExpanded) => {\r\n          if (!this.children && this.hasChildren && isExpanded) {\r\n            this.loadNodeChildren();\r\n          }\r\n        },\r\n        { fireImmediately: true }\r\n      );\r\n  }\r\n\r\n  dispose() {\r\n    if (this.children) {\r\n      this.children.forEach((child) => child.dispose());\r\n    }\r\n    if (this.handler) {\r\n      this.handler();\r\n    }\r\n    this.parent = null;\r\n    this.children = null;\r\n  }\r\n\r\n  setIsActive(value, multi = false) {\r\n    this.treeModel.setActiveNode(this, value, multi);\r\n    if (value) {\r\n      this.focus(this.options.scrollOnActivate);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  isSelectable() {\r\n    return this.isLeaf || !this.children || !this.options.useTriState;\r\n  }\r\n\r\n  @action setIsSelected(value) {\r\n    if (this.isSelectable()) {\r\n      this.treeModel.setSelectedNode(this, value);\r\n    } else {\r\n      this.visibleChildren.forEach((child) => child.setIsSelected(value));\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleSelected() {\r\n    this.setIsSelected(!this.isSelected);\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleActivated(multi = false) {\r\n    this.setIsActive(!this.isActive, multi);\r\n\r\n    return this;\r\n  }\r\n\r\n  setActiveAndVisible(multi = false) {\r\n    this.setIsActive(true, multi)\r\n      .ensureVisible();\r\n\r\n    setTimeout(this.scrollIntoView.bind(this));\r\n\r\n    return this;\r\n  }\r\n\r\n  scrollIntoView(force = false) {\r\n    this.treeModel.virtualScroll.scrollIntoView(this, force);\r\n  }\r\n\r\n  focus(scroll = true) {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(this);\r\n    if (scroll) {\r\n      this.scrollIntoView();\r\n    }\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });\r\n    }\r\n    this.fireEvent({ eventName: TREE_EVENTS.focus, node: this });\r\n\r\n    return this;\r\n  }\r\n\r\n  blur() {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(null);\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: this });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsHidden(value) {\r\n    this.treeModel.setIsHidden(this, value);\r\n  }\r\n\r\n  hide() {\r\n    this.setIsHidden(true);\r\n  }\r\n\r\n  show() {\r\n    this.setIsHidden(false);\r\n  }\r\n\r\n  mouseAction(actionName: string, $event, data: any = null) {\r\n    this.treeModel.setFocus(true);\r\n\r\n    const actionMapping = this.options.actionMapping.mouse;\r\n    const mouseAction = actionMapping[actionName];\r\n\r\n    if (mouseAction) {\r\n      mouseAction(this.treeModel, this, $event, data);\r\n    }\r\n  }\r\n\r\n  getSelfHeight() {\r\n    return this.options.nodeHeight(this);\r\n  }\r\n\r\n  @action _initChildren() {\r\n    this.children = this.getField('children')\r\n      .map((c, index) => new TreeNode(c, this, this.treeModel, index));\r\n  }\r\n}\r\n\r\nfunction uuid() {\r\n  return Math.floor(Math.random() * 10000000000000);\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { observable, computed, action, autorun } from 'mobx';\r\nimport { Subscription } from 'rxjs';\r\nimport { TreeNode } from './tree-node.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { TreeVirtualScroll } from './tree-virtual-scroll.model';\r\nimport { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\n@Injectable()\r\nexport class TreeModel implements ITreeModel, OnDestroy {\r\n  static focusedTree = null;\r\n\r\n  options: TreeOptions = new TreeOptions();\r\n  nodes: any[];\r\n  eventNames = Object.keys(TREE_EVENTS);\r\n  virtualScroll: TreeVirtualScroll;\r\n\r\n  @observable roots: TreeNode[];\r\n  @observable expandedNodeIds: IDTypeDictionary = {};\r\n  @observable selectedLeafNodeIds: IDTypeDictionary = {};\r\n  @observable activeNodeIds: IDTypeDictionary = {};\r\n  @observable hiddenNodeIds: IDTypeDictionary = {};\r\n  @observable focusedNodeId: IDType = null;\r\n  @observable virtualRoot: TreeNode;\r\n\r\n  private firstUpdate = true;\r\n  private events: any;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  // events\r\n  fireEvent(event) {\r\n    event.treeModel = this;\r\n    this.events[event.eventName].emit(event);\r\n    this.events.event.emit(event);\r\n  }\r\n\r\n  subscribe(eventName, fn) {\r\n    const subscription = this.events[eventName].subscribe(fn);\r\n    this.subscriptions.push(subscription);\r\n  }\r\n\r\n\r\n  // getters\r\n  getFocusedNode(): TreeNode {\r\n    return this.focusedNode;\r\n  }\r\n\r\n\r\n  getActiveNode(): TreeNode {\r\n    return this.activeNodes[0];\r\n  }\r\n\r\n  getActiveNodes(): TreeNode[] {\r\n    return this.activeNodes;\r\n  }\r\n\r\n  getVisibleRoots() {\r\n    return this.virtualRoot.visibleChildren;\r\n  }\r\n\r\n  getFirstRoot(skipHidden = false) {\r\n    const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n    return root != null && root.length ? root[0] : null;\r\n  }\r\n\r\n  getLastRoot(skipHidden = false) {\r\n    const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n    return root != null && root.length ? root[root.length - 1] : null;\r\n  }\r\n\r\n  get isFocused() {\r\n    return TreeModel.focusedTree === this;\r\n  }\r\n\r\n  isNodeFocused(node) {\r\n    return this.focusedNode === node;\r\n  }\r\n\r\n  isEmptyTree(): boolean {\r\n    return this.roots && this.roots.length === 0;\r\n  }\r\n\r\n  @computed get focusedNode() {\r\n    return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\r\n  }\r\n\r\n  @computed get expandedNodes() {\r\n    const nodes = Object.keys(this.expandedNodeIds)\r\n      .filter((id) => this.expandedNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get activeNodes() {\r\n    const nodes = Object.keys(this.activeNodeIds)\r\n      .filter((id) => this.activeNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get hiddenNodes() {\r\n    const nodes = Object.keys(this.hiddenNodeIds)\r\n        .filter((id) => this.hiddenNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get selectedLeafNodes() {\r\n    const nodes = Object.keys(this.selectedLeafNodeIds)\r\n        .filter((id) => this.selectedLeafNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  // locating nodes\r\n  getNodeByPath(path: any[], startNode= null): TreeNode {\r\n    if (!path) return null;\r\n\r\n    startNode = startNode || this.virtualRoot;\r\n    if (path.length === 0) return startNode;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const childId = path.shift();\r\n    const childNode = startNode.children.find(c => c.id === childId);\r\n\r\n    if (!childNode) return null;\r\n\r\n    return this.getNodeByPath(path, childNode);\r\n  }\r\n\r\n  getNodeById(id) {\r\n    const idStr = id.toString();\r\n\r\n    return this.getNodeBy((node) => node.id.toString() === idStr);\r\n  }\r\n\r\n  getNodeBy(predicate, startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const found = startNode.children.find(predicate);\r\n\r\n    if (found) { // found in children\r\n      return found;\r\n    } else { // look in children's children\r\n      for (let child of startNode.children) {\r\n        const foundInChildren = this.getNodeBy(predicate, child);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n  }\r\n\r\n  isExpanded(node) {\r\n    return this.expandedNodeIds[node.id];\r\n  }\r\n\r\n  isHidden(node) {\r\n    return this.hiddenNodeIds[node.id];\r\n  }\r\n\r\n  isActive(node) {\r\n    return this.activeNodeIds[node.id];\r\n  }\r\n\r\n  isSelected(node) {\r\n    return this.selectedLeafNodeIds[node.id];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n    this.unsubscribeAll();\r\n  }\r\n\r\n  dispose() {\r\n    // Dispose reactions of the replaced nodes\r\n    if (this.virtualRoot) {\r\n      this.virtualRoot.dispose();\r\n    }\r\n  }\r\n\r\n  unsubscribeAll() {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  // actions\r\n  @action setData({ nodes, options = null, events = null }: {nodes: any, options: any, events: any}) {\r\n    if (options) {\r\n      this.options = new TreeOptions(options);\r\n    }\r\n    if (events) {\r\n      this.events = events;\r\n    }\r\n    if (nodes) {\r\n      this.nodes = nodes;\r\n    }\r\n\r\n    this.update();\r\n  }\r\n\r\n  @action update() {\r\n    // Rebuild tree:\r\n    let virtualRootConfig = {\r\n      id: this.options.rootId,\r\n      virtual: true,\r\n      [this.options.childrenField]: this.nodes\r\n    };\r\n\r\n    this.dispose();\r\n\r\n    this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\r\n\r\n    this.roots = this.virtualRoot.children;\r\n\r\n    // Fire event:\r\n    if (this.firstUpdate) {\r\n      if (this.roots) {\r\n        this.firstUpdate = false;\r\n        this._calculateExpandedNodes();\r\n      }\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.updateData });\r\n    }\r\n  }\r\n\r\n\r\n  @action setFocusedNode(node) {\r\n    this.focusedNodeId = node ? node.id : null;\r\n  }\r\n\r\n  @action setFocus(value) {\r\n    TreeModel.focusedTree = value ? this : null;\r\n  }\r\n\r\n  @action doForAll(fn) {\r\n    this.roots.forEach((root) => root.doForAll(fn));\r\n  }\r\n\r\n  @action focusNextNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusPreviousNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusDrillDown() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action focusDrillUp() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (!previousNode) return;\r\n    if (previousNode.isExpanded) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode.realParent;\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action setActiveNode(node, value, multi = false) {\r\n    if (multi) {\r\n      this._setActiveNodeMulti(node, value);\r\n    }\r\n    else {\r\n      this._setActiveNodeSingle(node, value);\r\n    }\r\n\r\n    if (value) {\r\n      node.focus(this.options.scrollOnActivate);\r\n      this.fireEvent({ eventName: TREE_EVENTS.activate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11\r\n    }\r\n  }\r\n\r\n  @action setSelectedNode(node, value) {\r\n    this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, {[node.id]: value});\r\n\r\n    if (value) {\r\n      node.focus();\r\n      this.fireEvent({ eventName: TREE_EVENTS.select, node });\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deselect, node });\r\n    }\r\n  }\r\n\r\n  @action setExpandedNode(node, value) {\r\n    this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[node.id]: value});\r\n    this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });\r\n  }\r\n\r\n  @action expandAll() {\r\n    this.roots.forEach((root) => root.expandAll());\r\n  }\r\n\r\n  @action collapseAll() {\r\n    this.roots.forEach((root) => root.collapseAll());\r\n  }\r\n\r\n  @action setIsHidden(node, value) {\r\n    this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, {[node.id]: value});\r\n  }\r\n\r\n  @action setHiddenNodeIds(nodeIds) {\r\n    this.hiddenNodeIds = nodeIds.reduce((hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {\r\n      [id]: true\r\n    }), {});\r\n  }\r\n\r\n  performKeyAction(node, $event) {\r\n    const keyAction = this.options.actionMapping.keys[$event.keyCode];\r\n    if (keyAction) {\r\n      $event.preventDefault();\r\n      keyAction(this, node, $event);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @action filterNodes(filter, autoShow = true) {\r\n    let filterFn;\r\n\r\n    if (!filter) {\r\n      return this.clearFilter();\r\n    }\r\n\r\n    // support function and string filter\r\n    if (filter && typeof filter.valueOf() === 'string') {\r\n      filterFn = (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\r\n    }\r\n    else if (filter && typeof filter === 'function') {\r\n       filterFn = filter;\r\n    }\r\n    else {\r\n      console.error('Don\\'t know what to do with filter', filter);\r\n      console.error('Should be either a string or function');\r\n      return;\r\n    }\r\n\r\n    const ids = {};\r\n    this.roots.forEach((node) => this._filterNode(ids, node, filterFn, autoShow));\r\n    this.hiddenNodeIds = ids;\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action clearFilter() {\r\n    this.hiddenNodeIds = {};\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action moveNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n    const fromParent = node.parent;\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    const fromChildren = fromParent.getField('children');\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const originalNode = fromChildren.splice(fromIndex, 1)[0];\r\n\r\n    // Compensate for index if already removed from parent:\r\n    let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;\r\n\r\n    toChildren.splice(toIndex, 0, originalNode);\r\n\r\n    fromParent.treeModel.update();\r\n    if (to.parent.treeModel !== fromParent.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({\r\n      eventName: TREE_EVENTS.moveNode,\r\n      node: originalNode,\r\n      to: { parent: to.parent.data, index: toIndex },\r\n      from: { parent: fromParent.data, index: fromIndex}\r\n    });\r\n  }\r\n\r\n  @action copyNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const nodeCopy = this.options.getNodeClone(node);\r\n\r\n    toChildren.splice(to.index, 0, nodeCopy);\r\n\r\n    node.treeModel.update();\r\n    if (to.parent.treeModel !== node.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });\r\n  }\r\n\r\n  getState() {\r\n    return {\r\n      expandedNodeIds: this.expandedNodeIds,\r\n      selectedLeafNodeIds: this.selectedLeafNodeIds,\r\n      activeNodeIds: this.activeNodeIds,\r\n      hiddenNodeIds: this.hiddenNodeIds,\r\n      focusedNodeId: this.focusedNodeId\r\n    };\r\n  }\r\n\r\n  @action setState(state) {\r\n    if (!state) return;\r\n\r\n    Object.assign(this, {\r\n      expandedNodeIds: state.expandedNodeIds || {},\r\n      selectedLeafNodeIds: state.selectedLeafNodeIds || {},\r\n      activeNodeIds: state.activeNodeIds || {},\r\n      hiddenNodeIds: state.hiddenNodeIds || {},\r\n      focusedNodeId: state.focusedNodeId\r\n    });\r\n  }\r\n\r\n  subscribeToState(fn) {\r\n    autorun(() => fn(this.getState()));\r\n  }\r\n\r\n  canMoveNode(node, to, fromIndex = undefined) {\r\n    const fromNodeIndex = fromIndex || node.getIndexInParent();\r\n\r\n    // same node:\r\n    if (node.parent === to.parent && fromIndex === to.index) {\r\n      return false;\r\n    }\r\n\r\n    return !to.parent.isDescendantOf(node);\r\n  }\r\n\r\n  calculateExpandedNodes() {\r\n      this._calculateExpandedNodes();\r\n  }\r\n\r\n  // private methods\r\n  private _filterNode(ids, node, filterFn, autoShow) {\r\n    // if node passes function then it's visible\r\n    let isVisible = filterFn(node);\r\n\r\n    if (node.children) {\r\n      // if one of node's children passes filter then this node is also visible\r\n      node.children.forEach((child) => {\r\n        if (this._filterNode(ids, child, filterFn, autoShow)) {\r\n          isVisible = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    // mark node as hidden\r\n    if (!isVisible) {\r\n      ids[node.id] = true;\r\n    }\r\n    // auto expand parents to make sure the filtered nodes are visible\r\n    if (autoShow && isVisible) {\r\n      node.ensureVisible();\r\n    }\r\n    return isVisible;\r\n  }\r\n\r\n  private _calculateExpandedNodes(startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (startNode.data[this.options.isExpandedField]) {\r\n      this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[startNode.id]: true});\r\n    }\r\n    if (startNode.children) {\r\n      startNode.children.forEach((child) => this._calculateExpandedNodes(child));\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeSingle(node, value) {\r\n    // Deactivate all other nodes:\r\n    this.activeNodes\r\n      .filter((activeNode) => activeNode !== node)\r\n      .forEach((activeNode) => {\r\n        this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });\r\n        this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11\r\n      });\r\n\r\n    if (value) {\r\n      this.activeNodeIds = {[node.id]: true};\r\n    }\r\n    else {\r\n      this.activeNodeIds = {};\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeMulti(node, value) {\r\n    this.activeNodeIds = Object.assign({}, this.activeNodeIds, {[node.id]: value});\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TreeDraggedElement {\r\n  _draggedElement: any = null;\r\n\r\n  set(draggedElement: any) {\r\n    this._draggedElement = draggedElement;\r\n  }\r\n\r\n  get(): any {\r\n    return this._draggedElement;\r\n  }\r\n\r\n  isDragging() {\r\n    return !!this.get();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { observable, computed, action, autorun, reaction } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nconst Y_OFFSET = 500; // Extra pixels outside the viewport, in each direction, to render nodes in\r\nconst Y_EPSILON = 150; // Minimum pixel change required to recalculate the rendered nodes\r\n\r\n@Injectable()\r\nexport class TreeVirtualScroll {\r\n  private _dispose: any;\r\n\r\n  @observable yBlocks = 0;\r\n  @observable x = 0;\r\n  @observable viewportHeight = null;\r\n  viewport = null;\r\n\r\n  @computed get y() {\r\n    return this.yBlocks * Y_EPSILON;\r\n  }\r\n\r\n  @computed get totalHeight() {\r\n    return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;\r\n  }\r\n\r\n  constructor(private treeModel: TreeModel) {\r\n    treeModel.virtualScroll = this;\r\n    this._dispose = [autorun(() => this.fixScroll())];\r\n  }\r\n\r\n  fireEvent(event) {\r\n    this.treeModel.fireEvent(event);\r\n  }\r\n\r\n  init() {\r\n    const fn = this.recalcPositions.bind(this);\r\n\r\n    fn();\r\n    this._dispose = [\r\n      ...this._dispose,\r\n      reaction(() => this.treeModel.roots, fn),\r\n      reaction(() => this.treeModel.expandedNodeIds, fn),\r\n      reaction(() => this.treeModel.hiddenNodeIds, fn)\r\n    ];\r\n    this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);\r\n  }\r\n\r\n  isEnabled() {\r\n    return this.treeModel.options.useVirtualScroll;\r\n  }\r\n\r\n  @action private _setYBlocks(value) {\r\n    this.yBlocks = value;\r\n  }\r\n\r\n  @action recalcPositions() {\r\n    this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);\r\n  }\r\n\r\n  private _getPositionAfter(nodes, startPos) {\r\n    let position = startPos;\r\n\r\n    nodes.forEach((node) => {\r\n      node.position = position;\r\n      position = this._getPositionAfterNode(node, position);\r\n    });\r\n    return position;\r\n  }\r\n\r\n  private _getPositionAfterNode(node, startPos) {\r\n    let position = node.getSelfHeight() + startPos;\r\n\r\n    if (node.children && node.isExpanded) { // TBD: consider loading component as well\r\n      position = this._getPositionAfter(node.visibleChildren, position);\r\n    }\r\n    node.height = position - startPos;\r\n    return position;\r\n  }\r\n\r\n\r\n  clear() {\r\n    this._dispose.forEach((d) => d());\r\n  }\r\n\r\n  @action setViewport(viewport) {\r\n    Object.assign(this, {\r\n      viewport,\r\n      x: viewport.scrollLeft,\r\n      yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),\r\n      viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0\r\n    });\r\n  }\r\n\r\n  @action scrollIntoView(node, force, scrollToMiddle = true) {\r\n    if (node.options.scrollContainer) {\r\n      const scrollContainer = node.options.scrollContainer;\r\n      const scrollContainerHeight = scrollContainer.getBoundingClientRect().height;\r\n      const scrollContainerTop = scrollContainer.getBoundingClientRect().top;\r\n      const nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;\r\n\r\n      if (force || // force scroll to node\r\n        nodeTop < scrollContainer.scrollTop || // node is above scroll container\r\n        nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) { // node is below container\r\n        scrollContainer.scrollTop = scrollToMiddle ?\r\n          nodeTop - scrollContainerHeight / 2 : // scroll to middle\r\n          nodeTop; // scroll to start\r\n      }\r\n    } else {\r\n      if (force || // force scroll to node\r\n        node.position < this.y || // node is above viewport\r\n        node.position + node.getSelfHeight() > this.y + this.viewportHeight) { // node is below viewport\r\n        if (this.viewport) {\r\n          this.viewport.scrollTop = scrollToMiddle ?\r\n          node.position - this.viewportHeight / 2 : // scroll to middle\r\n          node.position; // scroll to start\r\n\r\n          this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getViewportNodes(nodes) {\r\n    if (!nodes) return [];\r\n\r\n    const visibleNodes = nodes.filter((node) => !node.isHidden);\r\n\r\n    if (!this.isEnabled()) return visibleNodes;\r\n\r\n    if (!this.viewportHeight || !visibleNodes.length) return [];\r\n\r\n    // When loading children async this method is called before their height and position is calculated.\r\n    // In that case firstIndex === 0 and lastIndex === visibleNodes.length - 1 (e.g. 1000),\r\n    // which means that it loops through every visibleNodes item and push them into viewportNodes array.\r\n    // We can prevent nodes from being pushed to the array and wait for the appropriate calculations to take place\r\n    const lastVisibleNode = visibleNodes.slice(-1)[0]\r\n    if (!lastVisibleNode.height && lastVisibleNode.position === 0) return [];\r\n\r\n    // Search for first node in the viewport using binary search\r\n    // Look for first node that starts after the beginning of the viewport (with buffer)\r\n    // Or that ends after the beginning of the viewport\r\n    const firstIndex = binarySearch(visibleNodes, (node) => {\r\n      return (node.position + Y_OFFSET > this.y) ||\r\n             (node.position + node.height > this.y);\r\n    });\r\n\r\n    // Search for last node in the viewport using binary search\r\n    // Look for first node that starts after the end of the viewport (with buffer)\r\n    const lastIndex = binarySearch(visibleNodes, (node) => {\r\n      return node.position - Y_OFFSET > this.y + this.viewportHeight;\r\n    }, firstIndex);\r\n\r\n    const viewportNodes = [];\r\n\r\n    for (let i = firstIndex; i <= lastIndex; i++) {\r\n      viewportNodes.push(visibleNodes[i]);\r\n    }\r\n\r\n    return viewportNodes;\r\n  }\r\n\r\n  fixScroll() {\r\n    const maxY = Math.max(0, this.totalHeight - this.viewportHeight);\r\n\r\n    if (this.y < 0) this._setYBlocks(0);\r\n    if (this.y > maxY) this._setYBlocks(maxY / Y_EPSILON);\r\n  }\r\n}\r\n\r\nfunction binarySearch(nodes, condition, firstIndex = 0) {\r\n  let index = firstIndex;\r\n  let toIndex = nodes.length - 1;\r\n\r\n  while (index !== toIndex) {\r\n    let midIndex = Math.floor((index + toIndex) / 2);\r\n\r\n    if (condition(nodes[midIndex])) {\r\n      toIndex = midIndex;\r\n    }\r\n    else {\r\n      if (index === midIndex) index = toIndex;\r\n      else index = midIndex;\r\n    }\r\n  }\r\n  return index;\r\n}\r\n","import { Component, Input, TemplateRef, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  encapsulation: ViewEncapsulation.None,\r\n  selector: 'tree-loading-component',\r\n  template: `\r\n    <span *ngIf=\"!template\">loading...</span>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"template\"\r\n      [ngTemplateOutletContext]=\"{ $implicit: node }\">\r\n    </ng-container>\r\n  `,\r\n})\r\nexport class LoadingComponent {\r\n  @Input() template: TemplateRef<any>;\r\n  @Input() node: TreeNode;\r\n}\r\n","import { Component, ContentChild, EventEmitter, HostListener, Input, OnChanges, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { TreeModel } from '../models/tree.model';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\nimport { TreeOptions } from '../models/tree-options.model';\r\nimport { ITreeOptions } from '../defs/api';\r\nimport { TreeViewportComponent } from './tree-viewport.component';\r\n\r\n@Component({\r\n  selector: 'Tree, tree-root',\r\n  providers: [TreeModel],\r\n  styles: [],\r\n  template: `\r\n      <tree-viewport #viewport>\r\n          <div\r\n                  class=\"angular-tree-component\"\r\n                  [class.node-dragging]=\"treeDraggedElement.isDragging()\"\r\n                  [class.angular-tree-component-rtl]=\"treeModel.options.rtl\">\r\n              <tree-node-collection\r\n                      *ngIf=\"treeModel.roots\"\r\n                      [nodes]=\"treeModel.roots\"\r\n                      [treeModel]=\"treeModel\"\r\n                      [templates]=\"{\r\n            loadingTemplate: loadingTemplate,\r\n            treeNodeTemplate: treeNodeTemplate,\r\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\r\n            treeNodeFullTemplate: treeNodeFullTemplate\r\n          }\">\r\n              </tree-node-collection>\r\n              <tree-node-drop-slot\r\n                      class=\"empty-tree-drop-slot\"\r\n                      *ngIf=\"treeModel.isEmptyTree()\"\r\n                      [dropIndex]=\"0\"\r\n                      [node]=\"treeModel.virtualRoot\">\r\n              </tree-node-drop-slot>\r\n          </div>\r\n      </tree-viewport>\r\n  `\r\n})\r\nexport class TreeComponent implements OnChanges {\r\n  _nodes: any[];\r\n  _options: TreeOptions;\r\n\r\n  @ContentChild('loadingTemplate', { static: false }) loadingTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeTemplate', { static: false }) treeNodeTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeWrapperTemplate', { static: false }) treeNodeWrapperTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeFullTemplate', { static: false }) treeNodeFullTemplate: TemplateRef<any>;\r\n  @ViewChild('viewport', { static: false }) viewportComponent: TreeViewportComponent;\r\n\r\n  // Will be handled in ngOnChanges\r\n  @Input() set nodes(nodes: any[]) {\r\n  };\r\n\r\n  @Input() set options(options: ITreeOptions) {\r\n  };\r\n\r\n  @Input() set focused(value: boolean) {\r\n    this.treeModel.setFocus(value);\r\n  }\r\n\r\n  @Input() set state(state) {\r\n    this.treeModel.setState(state);\r\n  }\r\n\r\n  @Output() toggleExpanded;\r\n  @Output() activate;\r\n  @Output() deactivate;\r\n  @Output() nodeActivate;\r\n  @Output() nodeDeactivate;\r\n  @Output() select;\r\n  @Output() deselect;\r\n  @Output() focus;\r\n  @Output() blur;\r\n  @Output() updateData;\r\n  @Output() initialized;\r\n  @Output() moveNode;\r\n  @Output() copyNode;\r\n  @Output() loadNodeChildren;\r\n  @Output() changeFilter;\r\n  @Output() event;\r\n  @Output() stateChange;\r\n\r\n  constructor(\r\n    public treeModel: TreeModel,\r\n    public treeDraggedElement: TreeDraggedElement) {\r\n\r\n    treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());\r\n    treeModel.subscribeToState((state) => this.stateChange.emit(state));\r\n  }\r\n\r\n  @HostListener('body: keydown', ['$event'])\r\n  onKeydown($event) {\r\n    if (!this.treeModel.isFocused) return;\r\n    if (['input', 'textarea'].includes(document.activeElement.tagName.toLowerCase())) return;\r\n\r\n    const focusedNode = this.treeModel.getFocusedNode();\r\n\r\n    this.treeModel.performKeyAction(focusedNode, $event);\r\n  }\r\n\r\n  @HostListener('body: mousedown', ['$event'])\r\n  onMousedown($event) {\r\n    function isOutsideClick(startElement: Element, nodeName: string) {\r\n      return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\r\n    }\r\n\r\n    if (isOutsideClick($event.target, 'tree-root')) {\r\n      this.treeModel.setFocus(false);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.options || changes.nodes) {\r\n      this.treeModel.setData({\r\n        options: changes.options && changes.options.currentValue,\r\n        nodes: changes.nodes && changes.nodes.currentValue,\r\n        events: this.pick(this, this.treeModel.eventNames)\r\n      });\r\n    }\r\n  }\r\n\r\n  sizeChanged() {\r\n    this.viewportComponent.setViewport();\r\n  }\r\n\r\n  private pick(object, keys) {\r\n    return keys.reduce((obj, key) => {\r\n      if (object && object.hasOwnProperty(key)) {\r\n        obj[key] = object[key];\r\n      }\r\n      return obj;\r\n    }, {});\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNode, tree-node',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        *ngIf=\"!templates.treeNodeFullTemplate\"\r\n        [class]=\"node.getClass()\"\r\n        [class.tree-node]=\"true\"\r\n        [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\"\r\n        [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\"\r\n        [class.tree-node-leaf]=\"node.isLeaf\"\r\n        [class.tree-node-active]=\"node.isActive\"\r\n        [class.tree-node-focused]=\"node.isFocused\"\r\n      >\r\n        <tree-node-drop-slot\r\n          *ngIf=\"index === 0\"\r\n          [dropIndex]=\"node.index\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n\r\n        <tree-node-wrapper\r\n          [node]=\"node\"\r\n          [index]=\"index\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-wrapper>\r\n\r\n        <tree-node-children\r\n          [node]=\"node\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-children>\r\n        <tree-node-drop-slot\r\n          [dropIndex]=\"node.index + 1\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n      </div>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"templates.treeNodeFullTemplate\"\r\n        [ngTemplateOutletContext]=\"{\r\n          $implicit: node,\r\n          node: node,\r\n          index: index,\r\n          templates: templates\r\n        }\"\r\n      >\r\n      </ng-container>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n}\r\n","import { Component, Input, ViewEncapsulation, TemplateRef } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-content',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n  <span *ngIf=\"!template\">{{ node.displayField }}</span>\r\n  <ng-container\r\n    [ngTemplateOutlet]=\"template\"\r\n    [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index }\">\r\n  </ng-container>`,\r\n})\r\nexport class TreeNodeContent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() template: TemplateRef<any>;\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNodeDropSlot, tree-node-drop-slot',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <div\r\n      class=\"node-drop-slot\"\r\n      (treeDrop)=\"onDrop($event)\"\r\n      [treeAllowDrop]=\"allowDrop.bind(this)\"\r\n      [allowDragoverStyling]=\"true\">\r\n    </div>\r\n  `\r\n})\r\nexport class TreeNodeDropSlot {\r\n  @Input() node: TreeNode;\r\n  @Input() dropIndex: number;\r\n\r\n  onDrop($event) {\r\n    this.node.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this.node, index: this.dropIndex }\r\n    });\r\n  }\r\n\r\n  allowDrop(element, $event) {\r\n    return this.node.options.allowDrop(element, { parent: this.node, index: this.dropIndex }, $event);\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-expander',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <span\r\n        *ngIf=\"node.hasChildren\"\r\n        [class.toggle-children-wrapper-expanded]=\"node.isExpanded\"\r\n        [class.toggle-children-wrapper-collapsed]=\"node.isCollapsed\"\r\n        class=\"toggle-children-wrapper\"\r\n        (click)=\"node.mouseAction('expanderClick', $event)\"\r\n      >\r\n        <span class=\"toggle-children\"></span>\r\n      </span>\r\n      <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\">\r\n      </span>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeExpanderComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-children',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        [class.tree-children]=\"true\"\r\n        [class.tree-children-no-padding]=\"node.options.levelPadding\"\r\n        *treeAnimateOpen=\"\r\n          node.isExpanded;\r\n          speed: node.options.animateSpeed;\r\n          acceleration: node.options.animateAcceleration;\r\n          enabled: node.options.animateExpand\r\n        \"\r\n      >\r\n        <tree-node-collection\r\n          *ngIf=\"node.children\"\r\n          [nodes]=\"node.children\"\r\n          [templates]=\"templates\"\r\n          [treeModel]=\"node.treeModel\"\r\n        >\r\n        </tree-node-collection>\r\n        <tree-loading-component\r\n          [style.padding-left]=\"node.getNodePadding()\"\r\n          class=\"tree-node-loading\"\r\n          *ngIf=\"!node.children\"\r\n          [template]=\"templates.loadingTemplate\"\r\n          [node]=\"node\"\r\n        ></tree-loading-component>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeChildrenComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() templates: any;\r\n}\r\n","import { action as mobxAction } from 'mobx';\r\nimport { computed as mobxComputed } from 'mobx';\r\nimport { observable as mobxObservable } from 'mobx';\r\n\r\n// Re-export mobx operators to be able to use inside components with AOT:\r\nexport function actionInternal(...args) {\r\n  return (mobxAction as any)(...args);\r\n}\r\nexport const action: typeof mobxAction = Object.assign(\r\n  actionInternal,\r\n  mobxAction\r\n) as any;\r\n\r\nfunction computedInternal(...args) {\r\n  return (mobxComputed as any)(...args);\r\n}\r\nexport const computed: typeof mobxComputed = Object.assign(\r\n  computedInternal,\r\n  mobxComputed\r\n) as any;\r\n\r\nfunction observableInternal(...args) {\r\n  return (mobxObservable as any)(...args);\r\n}\r\n\r\nexport const observable: typeof mobxObservable = Object.assign(\r\n  observableInternal,\r\n  mobxObservable\r\n) as any;\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { reaction } from 'mobx';\r\nimport { observable, computed, action } from '../mobx-angular/mobx-proxy';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TreeNode } from '../models/tree-node.model';\r\nimport { TreeModel } from '../models/tree.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-collection',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.margin-top]=\"marginTop\">\r\n        <tree-node\r\n          *ngFor=\"let node of viewportNodes; let i = index; trackBy: trackNode\"\r\n          [node]=\"node\"\r\n          [index]=\"i\"\r\n          [templates]=\"templates\"\r\n        >\r\n        </tree-node>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCollectionComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  get nodes() {\r\n    return this._nodes;\r\n  }\r\n  set nodes(nodes) {\r\n    this.setNodes(nodes);\r\n  }\r\n\r\n  @Input() treeModel: TreeModel;\r\n\r\n  @observable _nodes;\r\n  private virtualScroll: TreeVirtualScroll; // Cannot inject this, because we might be inside treeNodeTemplateFull\r\n  @Input() templates;\r\n\r\n  @observable viewportNodes: TreeNode[];\r\n\r\n  @computed get marginTop(): string {\r\n    const firstNode =\r\n      this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\r\n    const relativePosition =\r\n      firstNode && firstNode.parent\r\n        ? firstNode.position -\r\n          firstNode.parent.position -\r\n          firstNode.parent.getSelfHeight()\r\n        : 0;\r\n\r\n    return `${relativePosition}px`;\r\n  }\r\n\r\n  _dispose = [];\r\n\r\n  @action setNodes(nodes) {\r\n    this._nodes = nodes;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll = this.treeModel.virtualScroll;\r\n    this._dispose = [\r\n      // return node indexes so we can compare structurally,\r\n      reaction(\r\n        () => {\r\n          return this.virtualScroll\r\n            .getViewportNodes(this.nodes)\r\n            .map(n => n.index);\r\n        },\r\n        nodeIndexes => {\r\n          this.viewportNodes = nodeIndexes.map(i => this.nodes[i]);\r\n        },\r\n        { compareStructural: true, fireImmediately: true } as any\r\n      ),\r\n      reaction(\r\n        () => this.nodes,\r\n        nodes => {\r\n          this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);\r\n        }\r\n      )\r\n    ];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dispose.forEach(d => d());\r\n  }\r\n\r\n  trackNode(index, node) {\r\n    return node.id;\r\n  }\r\n}\r\n","import { Component , Input , ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-wrapper' ,\r\n  encapsulation: ViewEncapsulation.None ,\r\n  styles: [] ,\r\n  template: `\r\n      <div *ngIf=\"!templates.treeNodeWrapperTemplate\" class=\"node-wrapper\" [style.padding-left]=\"node.getNodePadding()\">\r\n          <tree-node-checkbox *ngIf=\"node.options.useCheckbox\" [node]=\"node\"></tree-node-checkbox>\r\n          <tree-node-expander [node]=\"node\"></tree-node-expander>\r\n          <div class=\"node-content-wrapper\"\r\n               [class.node-content-wrapper-active]=\"node.isActive\"\r\n               [class.node-content-wrapper-focused]=\"node.isFocused\"\r\n               (click)=\"node.mouseAction('click', $event)\"\r\n               (dblclick)=\"node.mouseAction('dblClick', $event)\"\r\n               (mouseover)=\"node.mouseAction('mouseOver', $event)\"\r\n               (mouseout)=\"node.mouseAction('mouseOut', $event)\"\r\n               (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\r\n               (treeDrop)=\"node.onDrop($event)\"\r\n               (treeDropDragOver)=\"node.mouseAction('dragOver', $event)\"\r\n               (treeDropDragLeave)=\"node.mouseAction('dragLeave', $event)\"\r\n               (treeDropDragEnter)=\"node.mouseAction('dragEnter', $event)\"\r\n               [treeAllowDrop]=\"node.allowDrop\"\r\n               [allowDragoverStyling]=\"node.allowDragoverStyling()\"\r\n               [treeDrag]=\"node\"\r\n               [treeDragEnabled]=\"node.allowDrag()\">\r\n\r\n              <tree-node-content [node]=\"node\" [index]=\"index\" [template]=\"templates.treeNodeTemplate\">\r\n              </tree-node-content>\r\n          </div>\r\n      </div>\r\n      <ng-container\r\n              [ngTemplateOutlet]=\"templates.treeNodeWrapperTemplate\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index, templates: templates }\">\r\n      </ng-container>\r\n  `\r\n})\r\n\r\nexport class TreeNodeWrapperComponent {\r\n\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  OnInit,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\n@Component({\r\n  selector: 'tree-viewport',\r\n  styles: [],\r\n  providers: [TreeVirtualScroll],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.height]=\"getTotalHeight()\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeViewportComponent implements AfterViewInit, OnInit, OnDestroy {\r\n  setViewport = this.throttle(() => {\r\n    this.virtualScroll.setViewport(this.elementRef.nativeElement);\r\n  }, 17);\r\n\r\n  private readonly scrollEventHandler: ($event: Event) => void;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    public virtualScroll: TreeVirtualScroll\r\n  ) {\r\n    this.scrollEventHandler = this.setViewport.bind(this);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll.init();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.setViewport();\r\n      this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });\r\n    });\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    el.addEventListener('scroll', this.scrollEventHandler);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.virtualScroll.clear();\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    el.removeEventListener('scroll', this.scrollEventHandler);\r\n  }\r\n\r\n  getTotalHeight() {\r\n    return (\r\n      (this.virtualScroll.isEnabled() &&\r\n        this.virtualScroll.totalHeight + 'px') ||\r\n      'auto'\r\n    );\r\n  }\r\n\r\n  private throttle(func, timeFrame) {\r\n    let lastTime = 0;\r\n    return function () {\r\n      let now = Date.now();\r\n      if (now - lastTime >= timeFrame) {\r\n        func();\r\n        lastTime = now;\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-checkbox',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <input\r\n        class=\"tree-node-checkbox\"\r\n        type=\"checkbox\"\r\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\r\n        [checked]=\"node.isSelected\"\r\n        [indeterminate]=\"node.isPartiallySelected\"\r\n      />\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCheckboxComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\nconst DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\r\n\r\n@Directive({\r\n  selector: '[treeDrop]'\r\n})\r\nexport class TreeDropDirective implements AfterViewInit, OnDestroy {\r\n  @Input() allowDragoverStyling = true;\r\n  @Output('treeDrop') onDropCallback = new EventEmitter();\r\n  @Output('treeDropDragOver') onDragOverCallback = new EventEmitter();\r\n  @Output('treeDropDragLeave') onDragLeaveCallback = new EventEmitter();\r\n  @Output('treeDropDragEnter') onDragEnterCallback = new EventEmitter();\r\n  private readonly dragOverEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragEnterEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragLeaveEventHandler: (ev: DragEvent) => void;\r\n\r\n  private _allowDrop = (element, $event) => true;\r\n\r\n  @Input() set treeAllowDrop(allowDrop) {\r\n    if (allowDrop instanceof Function) {\r\n      this._allowDrop = allowDrop;\r\n    }\r\n    else this._allowDrop = (element, $event) => allowDrop;\r\n  }\r\n\r\n  allowDrop($event) {\r\n    return this._allowDrop(this.treeDraggedElement.get(), $event);\r\n  }\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragOverEventHandler = this.onDragOver.bind(this);\r\n    this.dragEnterEventHandler = this.onDragEnter.bind(this);\r\n    this.dragLeaveEventHandler = this.onDragLeave.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('dragover', this.dragOverEventHandler);\r\n      el.addEventListener('dragenter', this.dragEnterEventHandler);\r\n      el.addEventListener('dragleave', this.dragLeaveEventHandler);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('dragover', this.dragOverEventHandler);\r\n    el.removeEventListener('dragenter', this.dragEnterEventHandler);\r\n    el.removeEventListener('dragleave', this.dragLeaveEventHandler);\r\n  }\r\n\r\n  onDragOver($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.addDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.onDragOverCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    $event.preventDefault();\r\n    if (this.allowDragoverStyling) {\r\n      this.addClass();\r\n    }\r\n  }\r\n\r\n  onDragEnter($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDragEnterCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n  }\r\n\r\n  onDragLeave($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.removeDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n    this.onDragLeaveCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) onDrop($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDropCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n\r\n  private addClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private removeClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private addDisabledClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n\r\n  private removeDisabledClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n}\r\n","import { AfterViewInit, Directive, DoCheck, ElementRef, HostListener, Input, NgZone, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\n\r\n@Directive({\r\n  selector: '[treeDrag]'\r\n})\r\nexport class TreeDragDirective implements AfterViewInit, DoCheck, OnDestroy {\r\n  @Input('treeDrag') draggedElement;\r\n  @Input() treeDragEnabled;\r\n  private readonly dragEventHandler: (ev: DragEvent) => void;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragEventHandler = this.onDrag.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('drag', this.dragEventHandler);\r\n    });\r\n  }\r\n\r\n  ngDoCheck() {\r\n    this.renderer.setAttribute(this.el.nativeElement, 'draggable', this.treeDragEnabled ? 'true' : 'false');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('drag', this.dragEventHandler);\r\n  }\r\n\r\n  @HostListener('dragstart', ['$event']) onDragStart(ev) {\r\n    // setting the data is required by firefox\r\n    ev.dataTransfer.setData('text', ev.target.id);\r\n    this.treeDraggedElement.set(this.draggedElement);\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragStart', ev);\r\n    }\r\n  }\r\n\r\n  onDrag(ev) {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('drag', ev);\r\n    }\r\n  }\r\n\r\n  @HostListener('dragend') onDragEnd() {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragEnd');\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n}\r\n","import { Directive, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nconst EASE_ACCELERATION = 1.005;\r\n\r\n@Directive({\r\n  selector: '[treeAnimateOpen]'\r\n})\r\nexport class TreeAnimateOpenDirective {\r\n  private _isOpen: boolean;\r\n\r\n  @Input('treeAnimateOpenSpeed') animateSpeed: number;\r\n  @Input('treeAnimateOpenAcceleration') animateAcceleration: number;\r\n  @Input('treeAnimateOpenEnabled') isEnabled: boolean;\r\n\r\n  @Input('treeAnimateOpen')\r\n  set isOpen(value: boolean) {\r\n    if (value) {\r\n      this._show();\r\n      if (this.isEnabled && this._isOpen === false) {\r\n        this._animateOpen();\r\n      }\r\n    } else {\r\n      this.isEnabled ? this._animateClose() : this._hide();\r\n    }\r\n    this._isOpen = !!value;\r\n  };\r\n\r\n  private innerElement: any;\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private templateRef: TemplateRef<any>,\r\n    private viewContainerRef: ViewContainerRef) {\r\n  }\r\n\r\n  private _show() {\r\n    if (this.innerElement) return;\r\n\r\n    // create child view\r\n    this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\r\n  }\r\n\r\n  private _hide() {\r\n    this.viewContainerRef.clear();\r\n    this.innerElement = null;\r\n  }\r\n\r\n  private _animateOpen() {\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let maxHeight = 0;\r\n\r\n    // set height to 0\r\n    this.renderer.setStyle(this.innerElement, 'max-height', `0`);\r\n\r\n    // increase maxHeight until height doesn't change\r\n    setTimeout(() => { // Allow inner element to create its content\r\n      const i = setInterval(() => {\r\n        if (!this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n        maxHeight += delta;\r\n        const roundedMaxHeight = Math.round(maxHeight);\r\n\r\n        this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);\r\n        const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\r\n\r\n        delta *= ease;\r\n        ease *= EASE_ACCELERATION;\r\n        if (height < roundedMaxHeight) {\r\n          // Make maxHeight auto because animation finished and container might change height later on\r\n          this.renderer.setStyle(this.innerElement, 'max-height', null);\r\n          clearInterval(i);\r\n        }\r\n      }, 17);\r\n    });\r\n  }\r\n\r\n  private _animateClose() {\r\n    if (!this.innerElement) return;\r\n\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\r\n\r\n    // slowly decrease maxHeight to 0, starting from current height\r\n    const i = setInterval(() => {\r\n      if (this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n      height -= delta;\r\n      this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);\r\n      delta *= ease;\r\n      ease *= EASE_ACCELERATION;\r\n\r\n      if (height <= 0) {\r\n        // after animation complete - remove child element\r\n        this.viewContainerRef.clear();\r\n        this.innerElement = null;\r\n        clearInterval(i);\r\n      }\r\n    }, 17);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeMobxAutorunDirective } from './mobx-angular/tree-mobx-autorun.directive';\r\n\r\nimport {\r\n  IActionHandler,\r\n  IActionMapping,\r\n  TREE_ACTIONS\r\n} from './models/tree-options.model';\r\nimport {\r\n  IAllowDragFn,\r\n  IAllowDropFn,\r\n  ITreeOptions,\r\n  ITreeState\r\n} from './defs/api';\r\nimport { KEYS } from './constants/keys';\r\nimport { TreeModel } from './models/tree.model';\r\nimport { TreeNode } from './models/tree-node.model';\r\nimport { TreeDraggedElement } from './models/tree-dragged-element.model';\r\nimport { TreeVirtualScroll } from './models/tree-virtual-scroll.model';\r\nimport { LoadingComponent } from './components/loading.component';\r\nimport { TreeComponent } from './components/tree.component';\r\nimport { TreeNodeComponent } from './components/tree-node.component';\r\nimport { TreeNodeContent } from './components/tree-node-content.component';\r\nimport { TreeNodeDropSlot } from './components/tree-node-drop-slot.component';\r\nimport { TreeNodeExpanderComponent } from './components/tree-node-expander.component';\r\nimport { TreeNodeChildrenComponent } from './components/tree-node-children.component';\r\nimport { TreeNodeCollectionComponent } from './components/tree-node-collection.component';\r\nimport { TreeNodeWrapperComponent } from './components/tree-node-wrapper.component';\r\nimport { TreeViewportComponent } from './components/tree-viewport.component';\r\nimport { TreeNodeCheckboxComponent } from './components/tree-node-checkbox.component';\r\nimport { TreeDropDirective } from './directives/tree-drop.directive';\r\nimport { TreeDragDirective } from './directives/tree-drag.directive';\r\nimport { TreeAnimateOpenDirective } from './directives/tree-animate-open.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  exports: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  imports: [CommonModule],\r\n  providers: []\r\n})\r\nexport class TreeModule {}\r\n\r\nexport {\r\n  TreeModel,\r\n  TreeNode,\r\n  TreeDraggedElement,\r\n  TreeVirtualScroll,\r\n  ITreeOptions,\r\n  TREE_ACTIONS,\r\n  KEYS,\r\n  IActionMapping,\r\n  IActionHandler,\r\n  IAllowDropFn,\r\n  IAllowDragFn,\r\n  LoadingComponent,\r\n  TreeAnimateOpenDirective,\r\n  TreeComponent,\r\n  TreeNodeComponent,\r\n  TreeNodeWrapperComponent,\r\n  TreeNodeContent,\r\n  TreeDropDirective,\r\n  TreeDragDirective,\r\n  TreeNodeExpanderComponent,\r\n  TreeNodeChildrenComponent,\r\n  TreeNodeDropSlot,\r\n  TreeNodeCollectionComponent,\r\n  TreeViewportComponent,\r\n  TreeNodeCheckboxComponent,\r\n  ITreeState\r\n};\r\n"]}