{"version":3,"sources":["../../../projects/lib/src/lib/swiper.interfaces.ts","../../../projects/lib/src/lib/swiper.directive.ts","../../../projects/lib/src/lib/swiper.component.ts","../../../projects/lib/src/lib/swiper.module.ts"],"names":["SWIPER_CONFIG","InjectionToken","SwiperEventNames","SwiperConfig","config","this","assign","prototype","target","key","Array","isArray","HTMLElement","SwiperDirective","platformId","zone","elementRef","differs","defaults","initialIndex","configDiff","disabled","performance","indexChange","EventEmitter","S_INIT","S_BEFOREDESTROY","S_SCROLL","S_PROGRESS","S_KEYPRESS","S_RESIZE","S_BREAKPOINT","S_ZOOMCHANGE","S_AFTERRESIZE","S_BEFORERESIZE","S_LOOPFIX","S_BEFORELOOPFIX","S_SLIDERMOVE","S_SLIDECHANGE","S_SETTRANSLATE","S_SETTRANSITION","S_FROMEDGE","S_TOEDGE","S_REACHEND","S_REACHBEGINNING","S_AUTOPLAY","S_AUTOPLAYSTART","S_AUTOPLAYSTOP","S_IMAGESREADY","S_LAZYIMAGELOAD","S_LAZYIMAGEREADY","S_SCROLLDRAGEND","S_SCROLLDRAGMOVE","S_SCROLLDRAGSTART","S_NAVIGATIONHIDE","S_NAVIGATIONSHOW","S_PAGINATIONRENDER","S_PAGINATIONUPDATE","S_PAGINATIONHIDE","S_PAGINATIONSHOW","S_TAP","S_CLICK","S_DOUBLETAP","S_TOUCHEND","S_TOUCHMOVE","S_TOUCHSTART","S_TOUCHMOVEOPPOSITE","S_TRANSITIONEND","S_TRANSITIONSTART","S_SLIDEPREVTRANSITIONEND","S_SLIDEPREVTRANSITIONSTART","S_SLIDENEXTTRANSITIONEND","S_SLIDENEXTTRANSITIONSTART","S_SLIDECHANGETRANSITIONEND","S_SLIDECHANGETRANSITIONSTART","S_OBSERVERUPDATE","Object","defineProperty","index","setIndex","ngAfterViewInit","_this","isPlatformBrowser","params","scrollbar","el","pagination","navigation","prevEl","nextEl","allowSlidePrev","allowSlideNext","initialSlide","on","slideChange","instance","observers","length","emit","realIndex","runOutsideAngular","Swiper","nativeElement","init","forEach","eventName","swiperEvent","replace","charAt","toLowerCase","slice","args","_i","arguments","output","toUpperCase","emitter","find","create","diff","ngOnDestroy","destroy","initialized","ngDoCheck","getIndex","update","ngOnChanges","changes","currentValue","previousValue","value","run","swiper","setTimeout","real","activeIndex","speed","silent","realIndex_1","slidesPerGroup","loop","loopedSlides","slideTo","prevSlide","slidePrev","nextSlide","slideNext","stopAutoplay","reset","autoplay","stop","startAutoplay","start","Directive","selector","exportAs","decorators","type","Inject","PLATFORM_ID","NgZone","ElementRef","KeyValueDiffers","Optional","Input","Output","SwiperComponent","cdRef","mo","swiperConfig","paginationBackup","paginationConfig","useSwiperClass","directiveRef","updateClasses","swiperSlides","MutationObserver","observe","childList","window","directiveOutput","componentOutput","disconnect","getConfig","renderBullet","className","children","from","filter","child","classList","contains","bullet","updateNeeded","i","test","add","detectChanges","onPaginationClick","clickable","Component","template","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","ViewChild","static","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { SwiperOptions } from 'swiper';\nimport { SwiperEvents } from 'swiper/types/swiper-events';\n\nexport const SWIPER_CONFIG = new InjectionToken<SwiperOptions>('SWIPER_CONFIG');\n\nexport type SwiperEvent = keyof SwiperEvents\n// Custom Events\n| 'scroll' | 'keyPress' | 'beforeResize'\n// swiper prefixed events that were added in v4.5.0\n| 'swiperTap'\n| 'swiperClick'\n| 'swiperDoubleTap'\n| 'swiperTouchEnd'\n| 'swiperTouchMove'\n| 'swiperTouchStart'\n| 'swiperTouchMoveOpposite'\n| 'swiperTransitionEnd'\n| 'swiperTransitionStart';\n\n\nexport const SwiperEventNames: SwiperEvent[] = [\n\n  'init',\n  'beforeDestroy',\n\n  'scroll',\n  'progress',\n  'keyPress',\n\n  'resize',\n  'loopFix',\n  'breakpoint',\n  'zoomChange',\n  'beforeResize',\n  'beforeLoopFix',\n\n  'sliderMove',\n  'slideChange',\n\n  'setTranslate',\n  'setTransition',\n\n  'fromEdge',\n  'reachEnd',\n  'reachBeginning',\n\n  'autoplay',\n  'autoplayStop',\n  'autoplayStart',\n\n  'imagesReady',\n  'lazyImageLoad',\n  'lazyImageReady',\n\n  'scrollbarDragEnd',\n  'scrollbarDragMove',\n  'scrollbarDragStart',\n\n  'navigationHide',\n  'navigationShow',\n\n  'paginationRender',\n  'paginationUpdate',\n  'paginationHide',\n  'paginationShow',\n\n  'swiperTap',\n  'swiperClick',\n  'swiperDoubleTap',\n  'swiperTouchEnd',\n  'swiperTouchMove',\n  'swiperTouchStart',\n  'swiperTouchMoveOpposite',\n  'swiperTransitionEnd',\n  'swiperTransitionStart',\n\n  'slideNextTransitionEnd',\n  'slideNextTransitionStart',\n  'slidePrevTransitionEnd',\n  'slidePrevTransitionStart',\n  'slideChangeTransitionEnd',\n  'slideChangeTransitionStart',\n\n  'toEdge',\n  'observerUpdate'\n];\n\nexport interface SwiperA11YInterface {\n  enabled?: boolean,\n  prevSlideMessage?: string,\n  nextSlideMessage?: string,\n  firstSlideMessage?: string,\n  lastSlideMessage?: string,\n  paginationBulletMessage?: string,\n  notificationClass?: string\n}\n\nexport interface SwiperLazyInterface {\n  loadPrevNext?: boolean,\n  loadPrevNextAmount?: number,\n  loadOnTransitionStart?: boolean,\n  elementClass?: string,\n  loadingClass?: string,\n  loadedClass?: string,\n  preloaderClass?: string\n}\n\nexport interface SwiperZoomInterface {\n  maxRatio?: number,\n  minRatio?: number,\n  toggle?: boolean,\n  containerClass?: string,\n  zoomedSlideClass?: string\n}\n\nexport interface SwiperThumbsInterface {\n  swiper?: any,\n  slideThumbActiveClass?: string,\n  thumbsContainerClass?: string,\n  multipleActiveThumbs?: boolean\n}\n\nexport interface SwiperHistoryInterface {\n  replaceState?: boolean,\n  key?: string\n}\n\nexport interface SwiperVirtualInterface {\n  slides?: any[],\n  cache?: boolean,\n  renderSlide?: SwiperRenderSlideFunction,\n  renderExternal?: SwiperRenderExternalFunction,\n  addSlidesBefore?: number,\n  addSlidesAfter?: number\n}\n\nexport interface SwiperKeyboardInterface {\n  enabled?: boolean,\n  onlyInViewport?: boolean\n}\n\nexport interface SwiperAutoplayInterface {\n  delay?: number,\n  stopOnLastSlide?: boolean,\n  disableOnInteraction?: boolean,\n  reverseDirection?: boolean,\n  waitForTransition?: boolean\n}\n\nexport interface SwiperScrollbarInterface {\n  el?: string | HTMLElement,\n  hide?: boolean,\n  draggable?: boolean,\n  snapOnRelease?: boolean,\n  dragSize?: number | 'auto',\n  loclClass?: string,\n  dragClass?: string\n}\n\nexport interface SwiperControllerInterface {\n  control?: any,\n  inverse?: boolean,\n  by?: 'slide' | 'container'\n}\n\nexport interface SwiperNavigationInterface {\n  nextEl?: string | HTMLElement,\n  prevEl?: string | HTMLElement,\n  hideOnClick?: boolean,\n  disabledClass?: string,\n  hiddenClass?: string\n}\n\nexport interface SwiperPaginationInterface {\n  el?: string | HTMLElement,\n  type?: 'bullets' | 'fraction' | 'progressbar' | 'custom',\n  bulletElement?: string,\n  dynamicBullets?: boolean,\n  dynamicMainBullets?: number,\n  hideOnClick?: boolean,\n  clickable?: boolean,\n  progressbarOpposite?: boolean,\n  formatFractionCurrent?: SwiperFormatFractionFunction,\n  formatFractionTotal?: SwiperFormatFractionFunction,\n  renderBullet?: SwiperRenderBulletFunction,\n  renderFraction?: SwiperRenderFractionFunction,\n  renderProgressbar?: SwiperRenderProgressbarFunction,\n  renderCustom?: SwiperRenderCustomFunction,\n  bulletClass?: string,\n  bulletActiveClass?: string,\n  modifierClass?: string,\n  currentClass?: string,\n  totalClass?: string,\n  hiddenClass?: string,\n  progressbarFillClass?: string,\n  clickableClass?: string,\n  lockClass?: string\n}\n\nexport interface SwiperMousewheelInterface {\n  forceToAxis?: boolean,\n  releaseOnEdges?: boolean,\n  invert?: boolean,\n  sensitivity?: number,\n  eventsTarget?: string | HTMLElement\n}\n\nexport interface SwiperHashNavigationInterface {\n  watchState?: boolean,\n  replaceState?: boolean\n}\n\nexport interface SwiperFadeEffectInterface {\n  crossFade?: boolean\n}\n\nexport interface SwiperFlipEffectInterface {\n  slideShadows?: boolean,\n  limitRotation?: boolean\n}\n\nexport interface SwiperCubeEffectInterface {\n  slideShadows?: boolean,\n  shadow?: boolean,\n  shadowOffset?: number,\n  shadowScale?: number\n}\n\nexport interface SwiperCoverflowEffectInterface {\n  slideShadows?: boolean,\n  rotate?: number,\n  stretch?: number,\n  depth?: number,\n  modifier?: number\n}\n\nexport interface SwiperBreakpointsInterface {\n  [size: number]: SwiperOptions\n}\n\nexport class SwiperConfig implements SwiperOptions {\n  public on?: any;\n\n  // Swiper parameters\n  public init?: boolean;\n  public updateOnWindowResize?: boolean;\n  public initialSlide?: number;\n  public direction?: 'horizontal' | 'vertical';\n  public speed?: number;\n  public setWrapperSize?: boolean;\n  public virtualTranslate?: boolean;\n  public width?: number;\n  public height?: number;\n  public autoHeight?: boolean;\n  public roundLengths?: boolean;\n  public nested?: boolean;\n  public uniqueNavElements?: boolean;\n  public effect?: 'slide' | 'fade' | 'cube' | 'coverflow' | 'flip';\n  public runCallbacksOnInit?: boolean;\n  public watchOverflow?: boolean;\n\n  // CSS scroll snapOnRelease\n  public cssMode?: boolean;\n\n  // Slides grid\n  public spaceBetween?: number;\n  public slidesPerView?: number | 'auto';\n  public slidesPerColumn?: number;\n  public slidesPerColumnFill?: 'row' | 'column';\n  public slidesPerGroup?: number;\n  public centeredSlides?: boolean;\n  public centeredSlidesBounds?: boolean;\n  public slidesOffsetBefore?: number;\n  public slidesOffsetAfter?: number;\n  public normalizeSlideIndex?: boolean;\n  public centerInsufficientSlides?: boolean;\n\n  // Grab cursor\n  public grabCursor?: boolean;\n\n  // Touches\n  public touchEventsTarget?: 'container' | 'wrapper';\n  public touchRatio?: number;\n  public touchAngle?: number;\n  public simulateTouch?: boolean;\n  public shortSwipes?: boolean;\n  public longSwipes?: boolean;\n  public longSwipesRatio?: number;\n  public longSwipesMs?: number;\n  public followFinger?: boolean;\n  public allowTouchMove?: boolean;\n  public threshold?: number;\n  public touchStartPreventDefault?: boolean;\n  public touchStartForcePreventDefault?: boolean;\n  public touchMoveStopPropagation?: boolean;\n  public iOSEdgeSwipeDetection?: boolean;\n  public iOSEdgeSwipeThreshold?: number;\n  public touchReleaseOnEdges?: boolean;\n  public passiveListeners?: boolean;\n\n  // Touch resistance\n  public resistance?: boolean;\n  public resistanceRatio?: number;\n\n  // Swiping / no swiping\n  public preventInteractionOnTransition?: boolean;\n  public allowSlidePrev?: boolean;\n  public allowSlideNext?: boolean;\n  public noSwiping?: boolean;\n  public noSwipingClass?: string;\n  public noSwipingSelector?: string;\n  public swipeHandler?: string | HTMLElement;\n\n  // Clicks\n  public preventClicks?: boolean;\n  public preventClicksPropagation?: boolean;\n  public slideToClickedSlide?: boolean;\n\n  // Freemode\n  public freeMode?: boolean;\n  public freeModeMomentum?: boolean;\n  public freeModeMomentumRatio?: number;\n  public freeModeMomentumVelocityRatio?: number;\n  public freeModeMomentumBounce?: boolean;\n  public freeModeMomentumBounceRatio?: number;\n  public freeModeMinimumVelocity?: number;\n  public freeModeSticky?: boolean;\n\n  // Progress\n  public watchSlidesProgress?: boolean;\n  public watchSlidesVisibility?: boolean;\n\n  // Images\n  public preloadImages?: boolean;\n  public updateOnImagesReady?: boolean;\n\n  // Loop\n  public loop?: boolean;\n  public loopAdditionalSlides?: number;\n  public loopedSlides?: number;\n  public loopFillGroupWithBlank?: boolean;\n\n  // Breakpoints\n  public breakpoints?: any;\n\n  // Observer\n  public observer?: boolean;\n  public observeParents?: boolean;\n  public observeSlideChildren?: boolean;\n\n  // Namespace\n  public containerModifierClass?: string;\n  public slideClass?: string;\n  public slideActiveClass?: string;\n  public slideDuplicatedActiveClass?: string;\n  public slideVisibleClass?: string;\n  public slideDuplicateClass?: string;\n  public slideNextClass?: string;\n  public slideDuplicatedNextClass?: string;\n  public slidePrevClass?: string;\n  public slideDuplicatedPrevClass?: string;\n  public wrapperClass?: string;\n\n  // Effects\n  public fadeEffect?: any;\n  public flipEffect?: any;\n  public cubeEffect?: any;\n  public coverflowEffect?: any;\n\n  // Components\n  public parallax?: boolean;\n\n  public a11y?: boolean | any;\n  public lazy?: boolean | any;\n  public zoom?: boolean | any;\n  public history?: boolean | any;\n  public virtual?: boolean | any;\n  public autoplay?: boolean | any;\n  public keyboard?: boolean | any;\n  public scrollbar?: boolean | any;\n  public mousewheel?: boolean | any;\n  public controller?: boolean | any;\n  public navigation?: boolean | any;\n  public pagination?: boolean | any;\n  public hashNavigation?: boolean | any;\n\n  constructor(config: SwiperOptions = {}) {\n    this.assign(config);\n  }\n\n  assign(config: SwiperOptions | any = {}, target?: any) {\n    target = target || this;\n\n    for (const key in config) {\n      if (config[key] != null && !Array.isArray(config[key]) && typeof config[key] === 'object' &&\n         (typeof HTMLElement === 'undefined' || !(config[key] instanceof HTMLElement)))\n      {\n        target[key] = {};\n\n        this.assign(config[key], target[key]);\n      } else {\n        target[key] = config[key];\n      }\n    }\n  }\n}\n\nexport type SwiperFormatFractionFunction = (fraction: number) => number;\n\nexport type SwiperRenderSlideFunction = (slide: any, index: number) => HTMLElement;\nexport type SwiperRenderExternalFunction = (data: any) => void;\n\nexport type SwiperRenderCustomFunction = (swiper: any, current: number, total: number) => string;\n\nexport type SwiperRenderBulletFunction = (index: number, className: string) => string;\nexport type SwiperRenderFractionFunction = (currentClass: string, totalClass: string) => string;\nexport type SwiperRenderProgressbarFunction = (progressbarClass: string) => string;\n","import Swiper from 'swiper/bundle';\nimport { SwiperOptions } from 'swiper';\n\nimport { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { NgZone, Inject, Optional, ElementRef, Directive,\n  AfterViewInit, OnDestroy, DoCheck, OnChanges, Input, Output, EventEmitter,\n  SimpleChanges, KeyValueDiffer, KeyValueDiffers } from '@angular/core';\nimport { SWIPER_CONFIG, SwiperConfig, SwiperEvent, SwiperEventNames } from './swiper.interfaces';\n\n@Directive({\n  selector: '[swiper]',\n  exportAs: 'ngxSwiper'\n})\nexport class SwiperDirective implements AfterViewInit, OnDestroy, DoCheck, OnChanges {\n  private instance: any;\n\n  private initialIndex: number | null = null;\n\n  private configDiff: KeyValueDiffer<string, any> | null = null;\n\n  @Input()\n  set index(index: number) {\n    if (index != null) {\n      this.setIndex(index);\n    }\n  }\n\n  @Input() disabled: boolean = false;\n\n  @Input() performance: boolean = false;\n\n  @Input('swiper') config?: SwiperOptions;\n\n  @Output() indexChange = new EventEmitter<number>();\n\n  @Output('init'                       ) S_INIT                           = new EventEmitter<any>();\n  @Output('beforeDestroy'              ) S_BEFOREDESTROY                  = new EventEmitter<any>();\n\n  @Output('scroll'                     ) S_SCROLL                         = new EventEmitter<any>();\n  @Output('progress'                   ) S_PROGRESS                       = new EventEmitter<any>();\n  @Output('keyPress'                   ) S_KEYPRESS                       = new EventEmitter<any>();\n\n  @Output('resize'                     ) S_RESIZE                         = new EventEmitter<any>();\n  @Output('breakpoint'                 ) S_BREAKPOINT                     = new EventEmitter<any>();\n  @Output('zoomChange'                 ) S_ZOOMCHANGE                     = new EventEmitter<any>();\n  @Output('afterResize'                ) S_AFTERRESIZE                    = new EventEmitter<any>();\n  @Output('beforeResize'               ) S_BEFORERESIZE                   = new EventEmitter<any>();\n\n  @Output('loopFix'                    ) S_LOOPFIX                        = new EventEmitter<any>();\n  @Output('beforeLoopFix'              ) S_BEFORELOOPFIX                  = new EventEmitter<any>();\n\n  @Output('sliderMove'                 ) S_SLIDERMOVE                     = new EventEmitter<any>();\n  @Output('slideChange'                ) S_SLIDECHANGE                    = new EventEmitter<any>();\n\n  @Output('setTranslate'               ) S_SETTRANSLATE                   = new EventEmitter<any>();\n  @Output('setTransition'              ) S_SETTRANSITION                  = new EventEmitter<any>();\n\n  @Output('fromEdge'                   ) S_FROMEDGE                       = new EventEmitter<any>();\n  @Output('toEdge'                     ) S_TOEDGE                         = new EventEmitter<any>();\n  @Output('reachEnd'                   ) S_REACHEND                       = new EventEmitter<any>();\n  @Output('reachBeginning'             ) S_REACHBEGINNING                 = new EventEmitter<any>();\n\n  @Output('autoplay'                   ) S_AUTOPLAY                       = new EventEmitter<any>();\n  @Output('autoplayStart'              ) S_AUTOPLAYSTART                  = new EventEmitter<any>();\n  @Output('autoplayStop'               ) S_AUTOPLAYSTOP                   = new EventEmitter<any>();\n\n  @Output('imagesReady'                ) S_IMAGESREADY                    = new EventEmitter<any>();\n  @Output('lazyImageLoad'              ) S_LAZYIMAGELOAD                  = new EventEmitter<any>();\n  @Output('lazyImageReady'             ) S_LAZYIMAGEREADY                 = new EventEmitter<any>();\n\n  @Output('scrollDragEnd'              ) S_SCROLLDRAGEND                  = new EventEmitter<any>();\n  @Output('scrollDragMove'             ) S_SCROLLDRAGMOVE                 = new EventEmitter<any>();\n  @Output('scrollDragStart'            ) S_SCROLLDRAGSTART                = new EventEmitter<any>();\n\n  @Output('navigationHide'             ) S_NAVIGATIONHIDE                 = new EventEmitter<any>();\n  @Output('navigationShow'             ) S_NAVIGATIONSHOW                 = new EventEmitter<any>();\n\n  @Output('paginationRender'           ) S_PAGINATIONRENDER               = new EventEmitter<any>();\n  @Output('paginationUpdate'           ) S_PAGINATIONUPDATE               = new EventEmitter<any>();\n  @Output('paginationHide'             ) S_PAGINATIONHIDE                 = new EventEmitter<any>();\n  @Output('paginationShow'             ) S_PAGINATIONSHOW                 = new EventEmitter<any>();\n\n  @Output('swiperTap'                  ) S_TAP                            = new EventEmitter<any>();\n  @Output('swiperClick'                ) S_CLICK                          = new EventEmitter<any>();\n  @Output('swiperDoubleTap'            ) S_DOUBLETAP                      = new EventEmitter<any>();\n  @Output('swiperTouchEnd'             ) S_TOUCHEND                       = new EventEmitter<any>();\n  @Output('swiperTouchMove'            ) S_TOUCHMOVE                      = new EventEmitter<any>();\n  @Output('swiperTouchStart'           ) S_TOUCHSTART                     = new EventEmitter<any>();\n  @Output('swiperTouchMoveOpposite'    ) S_TOUCHMOVEOPPOSITE              = new EventEmitter<any>();\n  @Output('swiperTransitionEnd'        ) S_TRANSITIONEND                  = new EventEmitter<any>();\n  @Output('swiperTransitionStart'      ) S_TRANSITIONSTART                = new EventEmitter<any>();\n\n  @Output('slidePrevTransitionEnd'     ) S_SLIDEPREVTRANSITIONEND         = new EventEmitter<any>();\n  @Output('slidePrevTransitionStart'   ) S_SLIDEPREVTRANSITIONSTART       = new EventEmitter<any>();\n  @Output('slideNextTransitionEnd'     ) S_SLIDENEXTTRANSITIONEND         = new EventEmitter<any>();\n  @Output('slideNextTransitionStart'   ) S_SLIDENEXTTRANSITIONSTART       = new EventEmitter<any>();\n  @Output('slideChangeTransitionEnd'   ) S_SLIDECHANGETRANSITIONEND       = new EventEmitter<any>();\n  @Output('slideChangeTransitionStart' ) S_SLIDECHANGETRANSITIONSTART     = new EventEmitter<any>();\n  @Output('observerUpdate'             ) S_OBSERVERUPDATE                 = new EventEmitter<any>();\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object, private zone: NgZone,\n    private elementRef: ElementRef, private differs: KeyValueDiffers,\n    @Optional() @Inject(SWIPER_CONFIG) private defaults: SwiperOptions) {}\n\n  ngAfterViewInit(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const params = new SwiperConfig(this.defaults);\n\n    params.assign(this.config); // Custom configuration\n\n    if (params.scrollbar === true) {\n      params.scrollbar = {\n        el: '.swiper-scrollbar'\n      };\n    }\n\n    if (params.pagination === true) {\n      params.pagination = {\n        el: '.swiper-pagination'\n      };\n    }\n\n    if (params.navigation === true) {\n      params.navigation = {\n        prevEl: '.swiper-button-prev',\n        nextEl: '.swiper-button-next'\n      };\n    }\n\n    if (this.disabled) {\n      params.allowSlidePrev = false;\n      params.allowSlideNext = false;\n    }\n\n    if (this.initialIndex != null) {\n      params.initialSlide = this.initialIndex;\n\n      this.initialIndex = null;\n    }\n\n    params.on = {\n      slideChange: () => {\n        if (this.instance && this.indexChange.observers.length) {\n          this.emit(this.indexChange, this.instance.realIndex);\n        }\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.instance = new Swiper(this.elementRef.nativeElement, params);\n    });\n\n    if (params.init !== false && this.S_INIT.observers.length) {\n      this.emit(this.S_INIT, this.instance);\n    }\n\n    // Add native Swiper event handling\n    SwiperEventNames.forEach((eventName: SwiperEvent) => {\n      let swiperEvent = eventName.replace('swiper', '');\n\n      swiperEvent = swiperEvent.charAt(0).toLowerCase() + swiperEvent.slice(1);\n\n      this.instance.on(swiperEvent, (...args: any[]) => {\n        if (args.length === 1) {\n          args = args[0];\n        }\n\n        const output = `S_${swiperEvent.toUpperCase()}`;\n\n        const emitter = this[output as keyof SwiperDirective] as EventEmitter<any>;\n\n        if (emitter.observers.length) {\n          this.emit(emitter, args);\n        }\n      });\n    });\n\n    if (!this.configDiff) {\n      this.configDiff = this.differs.find(this.config || {}).create();\n\n      this.configDiff.diff(this.config || {});\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.destroy(true, this.instance.initialized || false);\n      });\n\n      this.instance = null;\n    }\n  }\n\n  ngDoCheck(): void {\n    if (this.configDiff) {\n      const changes = this.configDiff.diff(this.config || {});\n\n      if (changes) {\n        this.initialIndex = this.getIndex(true);\n\n        this.ngOnDestroy();\n\n        this.ngAfterViewInit();\n\n        this.update();\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.instance && changes['disabled']) {\n      if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {\n        if (changes['disabled'].currentValue === true) {\n          this.zone.runOutsideAngular(() => {\n            this.ngOnDestroy();\n\n            this.ngAfterViewInit();\n          });\n        } else if (changes['disabled'].currentValue === false) {\n          this.zone.runOutsideAngular(() => {\n            this.ngOnDestroy();\n\n            this.ngAfterViewInit();\n          });\n        }\n      }\n    }\n  }\n\n  private emit(emitter: EventEmitter<any>, value: any): void {\n    if (this.performance) {\n      emitter.emit(value);\n    } else {\n      this.zone.run(() => emitter.emit(value));\n    }\n  }\n\n  public swiper(): any {\n    return this.instance;\n  }\n\n  public init(): void {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.init();\n      });\n    }\n  }\n\n  public update(): void {\n    setTimeout(() => {\n      if (this.instance) {\n        this.zone.runOutsideAngular(() => {\n          this.instance.update();\n        });\n      }\n    }, 0);\n  }\n\n  public getIndex(real?: boolean): number {\n    if (!this.instance) {\n      return this.initialIndex || 0;\n    } else {\n      return real ? this.instance.realIndex : this.instance.activeIndex;\n    }\n  }\n\n  public setIndex(index: number, speed?: number, silent?: boolean): void {\n    if (!this.instance) {\n      this.initialIndex = index;\n    } else {\n      let realIndex = index * this.instance.params.slidesPerGroup;\n\n      if (this.instance.params.loop) {\n        realIndex += this.instance.loopedSlides;\n      }\n\n      this.zone.runOutsideAngular(() => {\n        this.instance.slideTo(realIndex, speed, !silent);\n      });\n    }\n  }\n\n  public prevSlide(speed?: number, silent?: boolean): void {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.slidePrev(speed, !silent);\n      });\n    }\n  }\n\n  public nextSlide(speed?: number, silent?: boolean): void {\n    if (this.instance) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.slideNext(speed, !silent);\n      });\n    }\n  }\n\n  public stopAutoplay(reset?: boolean): void {\n    if (reset) {\n      this.setIndex(0);\n    }\n\n    if (this.instance && this.instance.autoplay) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.autoplay.stop();\n      });\n    }\n  }\n\n  public startAutoplay(reset?: boolean): void {\n    if (reset) {\n      this.setIndex(0);\n    }\n\n    if (this.instance && this.instance.autoplay) {\n      this.zone.runOutsideAngular(() => {\n        this.instance.autoplay.start();\n      });\n    }\n  }\n}\n","import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { NgZone, Inject, Optional, ElementRef, Component,\n  AfterViewInit, OnDestroy, Input, Output, EventEmitter,\n  ViewChild, ViewEncapsulation, ChangeDetectorRef } from '@angular/core';\n\nimport { SwiperOptions } from 'swiper';\n\nimport { SwiperDirective } from './swiper.directive';\nimport { SWIPER_CONFIG, SwiperConfig, SwiperEventNames, SwiperEvent } from './swiper.interfaces';\n\n@Component({\n  selector: 'swiper',\n  exportAs: 'ngxSwiper',\n  templateUrl: './swiper.component.html',\n  styleUrls: [\n    './swiper.component.css',\n    '../../../../node_modules/swiper/swiper-bundle.css'\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class SwiperComponent implements AfterViewInit, OnDestroy {\n  private mo: MutationObserver | null = null;\n\n  public swiperConfig: any = null;\n  public paginationBackup: any = null;\n  public paginationConfig: any = null;\n\n  @Input() index: number | null = null;\n\n  @Input() disabled: boolean = false;\n\n  @Input() performance: boolean = false;\n\n  @Input() config?: SwiperOptions;\n\n  @Input() useSwiperClass: boolean = true;\n\n  @Output() indexChange = new EventEmitter<number>();\n\n  @ViewChild('swiperSlides', { static: false }) swiperSlides?: ElementRef;\n\n  @ViewChild(SwiperDirective, { static: false }) directiveRef?: SwiperDirective;\n\n  get isAtLast(): boolean {\n    return (!this.directiveRef || !this.directiveRef.swiper()) ?\n      false : this.directiveRef.swiper()['isEnd'];\n  }\n\n  get isAtFirst(): boolean {\n    return (!this.directiveRef || !this.directiveRef.swiper()) ?\n      false : this.directiveRef.swiper()['isBeginning'];\n  }\n\n  @Output('init'                       ) S_INIT                           = new EventEmitter<any>();\n  @Output('beforeDestroy'              ) S_BEFOREDESTROY                  = new EventEmitter<any>();\n\n  @Output('scroll'                     ) S_SCROLL                         = new EventEmitter<any>();\n  @Output('progress'                   ) S_PROGRESS                       = new EventEmitter<any>();\n  @Output('keyPress'                   ) S_KEYPRESS                       = new EventEmitter<any>();\n\n  @Output('resize'                     ) S_RESIZE                         = new EventEmitter<any>();\n  @Output('breakpoint'                 ) S_BREAKPOINT                     = new EventEmitter<any>();\n  @Output('zoomChange'                 ) S_ZOOMCHANGE                     = new EventEmitter<any>();\n  @Output('afterResize'                ) S_AFTERRESIZE                    = new EventEmitter<any>();\n  @Output('beforeResize'               ) S_BEFORERESIZE                   = new EventEmitter<any>();\n\n  @Output('beforeLoopFix'              ) S_BEFORELOOPFIX                  = new EventEmitter<any>();\n  @Output('loopFix'                    ) S_LOOPFIX                        = new EventEmitter<any>();\n\n  @Output('sliderMove'                 ) S_SLIDERMOVE                     = new EventEmitter<any>();\n  @Output('slideChange'                ) S_SLIDECHANGE                    = new EventEmitter<any>();\n\n  @Output('setTranslate'               ) S_SETTRANSLATE                   = new EventEmitter<any>();\n  @Output('setTransition'              ) S_SETTRANSITION                  = new EventEmitter<any>();\n\n  @Output('fromEdge'                   ) S_FROMEDGE                       = new EventEmitter<any>();\n  @Output('toEdge'                     ) S_TOEDGE                         = new EventEmitter<any>();\n  @Output('reachEnd'                   ) S_REACHEND                       = new EventEmitter<any>();\n  @Output('reachBeginning'             ) S_REACHBEGINNING                 = new EventEmitter<any>();\n\n  @Output('autoplay'                   ) S_AUTOPLAY                       = new EventEmitter<any>();\n  @Output('autoplayStart'              ) S_AUTOPLAYSTART                  = new EventEmitter<any>();\n  @Output('autoplayStop'               ) S_AUTOPLAYSTOP                   = new EventEmitter<any>();\n\n  @Output('imagesReady'                ) S_IMAGESREADY                    = new EventEmitter<any>();\n  @Output('lazyImageLoad'              ) S_LAZYIMAGELOAD                  = new EventEmitter<any>();\n  @Output('lazyImageReady'             ) S_LAZYIMAGEREADY                 = new EventEmitter<any>();\n\n  @Output('scrollDragEnd'              ) S_SCROLLDRAGEND                  = new EventEmitter<any>();\n  @Output('scrollDragMove'             ) S_SCROLLDRAGMOVE                 = new EventEmitter<any>();\n  @Output('scrollDragStart'            ) S_SCROLLDRAGSTART                = new EventEmitter<any>();\n\n  @Output('navigationHide'             ) S_NAVIGATIONHIDE                 = new EventEmitter<any>();\n  @Output('navigationShow'             ) S_NAVIGATIONSHOW                 = new EventEmitter<any>();\n\n  @Output('paginationRender'           ) S_PAGINATIONRENDER               = new EventEmitter<any>();\n  @Output('paginationUpdate'           ) S_PAGINATIONUPDATE               = new EventEmitter<any>();\n  @Output('paginationHide'             ) S_PAGINATIONHIDE                 = new EventEmitter<any>();\n  @Output('paginationShow'             ) S_PAGINATIONSHOW                 = new EventEmitter<any>();\n\n  @Output('swiperTap'                  ) S_TAP                            = new EventEmitter<any>();\n  @Output('swiperClick'                ) S_CLICK                          = new EventEmitter<any>();\n  @Output('swiperDoubleTap'            ) S_DOUBLETAP                      = new EventEmitter<any>();\n  @Output('swiperTouchEnd'             ) S_TOUCHEND                       = new EventEmitter<any>();\n  @Output('swiperTouchMove'            ) S_TOUCHMOVE                      = new EventEmitter<any>();\n  @Output('swiperTouchStart'           ) S_TOUCHSTART                     = new EventEmitter<any>();\n  @Output('swiperTouchMoveOpposite'    ) S_TOUCHMOVEOPPOSITE              = new EventEmitter<any>();\n  @Output('swiperTransitionEnd'        ) S_TRANSITIONEND                  = new EventEmitter<any>();\n  @Output('swiperTransitionStart'      ) S_TRANSITIONSTART                = new EventEmitter<any>();\n\n  @Output('slidePrevTransitionEnd'     ) S_SLIDEPREVTRANSITIONEND         = new EventEmitter<any>();\n  @Output('slidePrevTransitionStart'   ) S_SLIDEPREVTRANSITIONSTART       = new EventEmitter<any>();\n  @Output('slideNextTransitionEnd'     ) S_SLIDENEXTTRANSITIONEND         = new EventEmitter<any>();\n  @Output('slideNextTransitionStart'   ) S_SLIDENEXTTRANSITIONSTART       = new EventEmitter<any>();\n  @Output('slideChangeTransitionEnd'   ) S_SLIDECHANGETRANSITIONEND       = new EventEmitter<any>();\n  @Output('slideChangeTransitionStart' ) S_SLIDECHANGETRANSITIONSTART     = new EventEmitter<any>();\n  @Output('observerUpdate'             ) S_OBSERVERUPDATE                 = new EventEmitter<any>();\n\n\n  constructor(private zone: NgZone, private cdRef: ChangeDetectorRef,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() @Inject(SWIPER_CONFIG) private defaults: SwiperOptions) {}\n\n  ngAfterViewInit(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    this.zone.runOutsideAngular(() => {\n      this.updateClasses();\n\n      if (this.swiperSlides && typeof MutationObserver !== 'undefined') {\n        this.mo = new MutationObserver(() => {\n          this.updateClasses();\n        });\n\n        this.mo.observe(this.swiperSlides.nativeElement, { childList: true });\n      }\n    });\n\n    window.setTimeout(() => {\n      if (this.directiveRef) {\n        this.S_INIT.emit();\n\n        this.directiveRef.indexChange = this.indexChange;\n\n        SwiperEventNames.forEach((eventName: SwiperEvent) => {\n          if (this.directiveRef) {\n            const output = `S_${eventName.replace('swiper', '').toUpperCase()}`;\n\n            const directiveOutput = output as keyof SwiperDirective;\n            const componentOutput = output as keyof SwiperComponent;\n\n            this.directiveRef[directiveOutput] = this[componentOutput] as never;\n          }\n        });\n      }\n    }, 0);\n  }\n\n  ngOnDestroy(): void {\n    if (this.mo) {\n      this.mo.disconnect();\n    }\n\n    if (this.config && this.paginationBackup) {\n      this.config.pagination = this.paginationBackup;\n    }\n  }\n\n  public getConfig(): SwiperOptions {\n    this.swiperConfig = new SwiperConfig(this.defaults);\n\n    this.swiperConfig.assign(this.config); // Custom configuration\n\n    if (this.swiperSlides && (this.swiperConfig.pagination === true ||\n       (this.swiperConfig.pagination && typeof this.swiperConfig.pagination === 'object' &&\n       (!this.swiperConfig.pagination.type || this.swiperConfig.pagination.type === 'bullets') &&\n       !this.swiperConfig.pagination.renderBullet && this.swiperConfig.pagination.el === '.swiper-pagination')))\n    {\n      this.config = this.config || {};\n\n      if (!this.paginationConfig) {\n        this.paginationBackup = this.config.pagination;\n\n        this.paginationConfig = {\n          el: '.swiper-pagination',\n\n          renderBullet: (index: number, className: string) => {\n            let children = this.swiperSlides ? Array.from(this.swiperSlides.nativeElement.children) : [];\n\n            children = children.filter((child: any) => child.classList.contains('swiper-slide'));\n\n            let bullet = `<span class=\"${className} ${className}-middle\" index=\"${index}\"></span>`;\n\n            if (index === 0) {\n              bullet = `<span class=\"${className} ${className}-first\" index=\"${index}\"></span>`;\n            } else if (index === (children.length - 1)) {\n              bullet = `<span class=\"${className} ${className}-last\" index=\"${index}\"></span>`;\n            }\n\n            return `<span class=\"swiper-pagination-handle\" index=\"${index}\">${bullet}</span>`;\n          }\n        };\n      }\n\n      if (this.swiperConfig.pagination === true) {\n        this.config.pagination = this.paginationConfig;\n      } else {\n        this.config.pagination = Object.assign({} , this.config.pagination, this.paginationConfig);\n      }\n    }\n\n    return this.config as SwiperOptions;\n  }\n\n  private updateClasses(): void {\n    if (this.swiperSlides) {\n      let updateNeeded = false;\n\n      const children = this.swiperSlides.nativeElement.children;\n\n      for (let i = 0; i < children.length; i++) {\n        if (/swiper-.*/.test(children[i].className) === false) {\n          updateNeeded = true;\n\n          children[i].classList.add('swiper-slide');\n        }\n      }\n\n      if (updateNeeded && this.directiveRef) {\n        this.directiveRef.update();\n      }\n    }\n\n    this.cdRef.detectChanges();\n  }\n\n  public onPaginationClick(index: number): void {\n    if (this.config && this.directiveRef && (this.config.pagination === true ||\n       (this.config.pagination && typeof this.config.pagination === 'object' &&\n       (!this.config.pagination.type || this.config.pagination.type === 'bullets') &&\n       (this.config.pagination.clickable && this.config.pagination.el === '.swiper-pagination'))))\n    {\n      this.directiveRef.setIndex(index);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SwiperComponent } from './swiper.component';\nimport { SwiperDirective } from './swiper.directive';\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: [ SwiperComponent, SwiperDirective ],\n  exports: [ CommonModule, SwiperComponent, SwiperDirective ]\n})\nexport class SwiperModule {\n}\n"]}