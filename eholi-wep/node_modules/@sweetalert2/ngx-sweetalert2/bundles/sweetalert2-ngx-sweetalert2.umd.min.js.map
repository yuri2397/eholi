{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@sweetalert2/ngx-sweetalert2/lib/di.ts","ng://@sweetalert2/ngx-sweetalert2/lib/sweetalert2-loader.service.ts","ng://@sweetalert2/ngx-sweetalert2/lib/swal.component.ts","ng://@sweetalert2/ngx-sweetalert2/lib/swal.directive.ts","ng://@sweetalert2/ngx-sweetalert2/lib/swal-portal-targets.service.ts","ng://@sweetalert2/ngx-sweetalert2/lib/swal-portal.component.ts","ng://@sweetalert2/ngx-sweetalert2/lib/swal-portal.directive.ts","ng://@sweetalert2/ngx-sweetalert2/lib/sweetalert2.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","ar","error","__spread","concat","swalProviderToken","InjectionToken","fireOnInitToken","dismissOnDestroyToken","SweetAlert2LoaderService","swalProvider","swalPromiseCache","preloadSweetAlertLibrary","libPromise","undefined","version","isDefaultExport","default","Inject","args","Injectable","SwalComponent","sweetAlert2Loader","moduleLevelFireOnInit","moduleLevelDismissOnDestroy","beforeOpen","EventEmitter","open","render","close","afterClose","destroy","confirm","cancel","touchedProps","Set","markTouched","add","bind","isCurrentlyShown","_this","reduce","obj","_a","options","keys","forEach","visible","fire","dismiss","ngOnInit","ngAfterViewInit","swalFireOnInit","ngOnChanges","changes","filter","startsWith","update","ngOnDestroy","swalDismissOnDestroy","composeHook","userHook","libHook","_i","swal","userOptions","swalOptions","onBeforeOpen","modalElement","emit","onOpen","onRender","onClose","onAfterClose","onDestroy","allOptions","updatableOptions","isUpdatableParameter","Input","Output","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","SwalDirective","viewContainerRef","resolver","swalInstance","Array","isArray","title","text","icon","factory","resolveComponentFactory","swalRef","createComponent","instance","onClick","event","preventDefault","stopImmediatePropagation","stopPropagation","swalClosed","Subject","asObservable","pipe","takeUntil","subscribe","ViewContainerRef","ComponentFactoryResolver","HostListener","Directive","SwalPortalTargets","closeButton","element","getCloseButton","showCloseButton","getTitle","content","getHtmlContainer","actions","getActions","showConfirmButton","confirmButton","getConfirmButton","cancelButton","getCancelButton","showCancelButton","footer","getFooter","providedIn","SwalPortalComponent","SwalPortalDirective","injector","app","templateRef","swalTargets","swalComponent","destroyed","renderHook","beforeOpenHook","destroyHook","portalComponentRef","createPortalComponent","targetEl","firstChild","removeChild","appendChild","location","nativeElement","attachView","hostView","detachView","componentRef","create","Injector","ApplicationRef","TemplateRef","type","Host","provideDefaultSwal","import","SweetAlert2Module","forRoot","ngModule","SweetAlert2Module_1","providers","provide","useValue","provideSwal","fireOnInit","dismissOnDestroy","forChild","NgModule","declarations","imports","CommonModule","exports","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport Swal from 'sweetalert2';\n\nexport const swalProviderToken = new InjectionToken<typeof Swal>('@sweetalert2/ngx-sweetalert2#swalProvider');\n\nexport const fireOnInitToken = new InjectionToken<boolean>('@sweetalert2/ngx-sweetalert2#fireOnInit');\n\nexport const dismissOnDestroyToken = new InjectionToken<boolean>('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n","import { Inject, Injectable } from '@angular/core';\nimport SwalDefault, * as Swal from 'sweetalert2';\nimport { swalProviderToken } from './di';\n\nexport type SwalModule = typeof SwalDefault | typeof Swal;\n\nexport type SwalProvider = SwalModuleLoader | SwalModule;\n\nexport type SwalModuleLoader = () => Promise<SwalModule>;\n\n@Injectable()\nexport class SweetAlert2LoaderService {\n    private readonly swalProvider: SwalProvider;\n\n    private swalPromiseCache?: Promise<typeof SwalDefault>;\n\n    // Using any because Angular metadata generator does not understand a pure TS type here\n    public constructor(@Inject(swalProviderToken) swalProvider: any) {\n        this.swalProvider = swalProvider;\n    }\n\n    public get swal(): Promise<typeof SwalDefault> {\n        if (!this.swalPromiseCache) {\n            this.preloadSweetAlertLibrary();\n        }\n\n        return this.swalPromiseCache!;\n    }\n\n    public preloadSweetAlertLibrary(): void {\n        if (this.swalPromiseCache) return;\n\n        const libPromise = isLoader(this.swalProvider)\n            ? this.swalProvider()\n            : Promise.resolve(this.swalProvider);\n\n        this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);\n\n        function isLoader(value: SwalProvider): value is SwalModuleLoader {\n            return typeof value === 'function' && (value as any).version === undefined;\n        }\n\n        function isDefaultExport(value: SwalModule): value is typeof SwalDefault {\n            return typeof value === 'function';\n        }\n    }\n}\n","import {\n    AfterViewInit, ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnChanges, OnDestroy, OnInit,\n    Output, SimpleChanges\n} from '@angular/core';\nimport Swal, { SweetAlertOptions, SweetAlertResult, SweetAlertUpdatableParameters } from 'sweetalert2';\nimport { dismissOnDestroyToken, fireOnInitToken } from './di';\nimport * as events from './swal-events';\nimport { SweetAlert2LoaderService } from './sweetalert2-loader.service';\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,\n *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, onClose, onAfterClose and onDestroy\n *     (but without \"on*\" prefix to respect community standards).\n *     However, preConfirm and inputValidator are still @Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the values they can/must return.\n */\n@Component({\n    // tslint:disable-next-line:component-selector\n    selector: 'swal',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n    @Input() public title: SweetAlertOptions['title'];\n    @Input() public titleText: SweetAlertOptions['titleText'];\n    @Input() public text: SweetAlertOptions['text'];\n    @Input() public html: SweetAlertOptions['html'];\n    @Input() public footer: SweetAlertOptions['footer'];\n    @Input() public icon: SweetAlertOptions['icon'];\n    @Input() public iconHtml: SweetAlertOptions['iconHtml'];\n    @Input() public backdrop: SweetAlertOptions['backdrop'];\n    @Input() public toast: SweetAlertOptions['toast'];\n    @Input() public target: SweetAlertOptions['target'];\n    @Input() public input: SweetAlertOptions['input'];\n    @Input() public width: SweetAlertOptions['width'];\n    @Input() public padding: SweetAlertOptions['padding'];\n    @Input() public background: SweetAlertOptions['background'];\n    @Input() public position: SweetAlertOptions['position'];\n    @Input() public grow: SweetAlertOptions['grow'];\n    @Input() public showClass: SweetAlertOptions['showClass'];\n    @Input() public hideClass: SweetAlertOptions['hideClass'];\n    @Input() public customClass: SweetAlertOptions['customClass'];\n    @Input() public timer: SweetAlertOptions['timer'];\n    @Input() public timerProgressBar: SweetAlertOptions['timerProgressBar'];\n    /** @deprecated Use showClass and hideClass instead */\n    @Input() public animation: SweetAlertOptions['animation'];\n    @Input() public heightAuto: SweetAlertOptions['heightAuto'];\n    @Input() public allowOutsideClick: SweetAlertOptions['allowOutsideClick'];\n    @Input() public allowEscapeKey: SweetAlertOptions['allowEscapeKey'];\n    @Input() public allowEnterKey: SweetAlertOptions['allowEnterKey'];\n    @Input() public stopKeydownPropagation: SweetAlertOptions['stopKeydownPropagation'];\n    @Input() public keydownListenerCapture: SweetAlertOptions['keydownListenerCapture'];\n    @Input() public showConfirmButton: SweetAlertOptions['showConfirmButton'];\n    @Input() public showCancelButton: SweetAlertOptions['showCancelButton'];\n    @Input() public confirmButtonText: SweetAlertOptions['confirmButtonText'];\n    @Input() public cancelButtonText: SweetAlertOptions['cancelButtonText'];\n    @Input() public confirmButtonColor: SweetAlertOptions['confirmButtonColor'];\n    @Input() public cancelButtonColor: SweetAlertOptions['cancelButtonColor'];\n    @Input() public confirmButtonAriaLabel: SweetAlertOptions['confirmButtonAriaLabel'];\n    @Input() public cancelButtonAriaLabel: SweetAlertOptions['cancelButtonAriaLabel'];\n    @Input() public buttonsStyling: SweetAlertOptions['buttonsStyling'];\n    @Input() public reverseButtons: SweetAlertOptions['reverseButtons'];\n    @Input() public focusConfirm: SweetAlertOptions['focusConfirm'];\n    @Input() public focusCancel: SweetAlertOptions['focusCancel'];\n    @Input() public showCloseButton: SweetAlertOptions['showCloseButton'];\n    @Input() public closeButtonHtml: SweetAlertOptions['closeButtonHtml'];\n    @Input() public closeButtonAriaLabel: SweetAlertOptions['closeButtonAriaLabel'];\n    @Input() public showLoaderOnConfirm: SweetAlertOptions['showLoaderOnConfirm'];\n    @Input() public preConfirm: SweetAlertOptions['preConfirm'];\n    @Input() public imageUrl: SweetAlertOptions['imageUrl'];\n    @Input() public imageWidth: SweetAlertOptions['imageWidth'];\n    @Input() public imageHeight: SweetAlertOptions['imageHeight'];\n    @Input() public imageAlt: SweetAlertOptions['imageAlt'];\n    @Input() public inputPlaceholder: SweetAlertOptions['inputPlaceholder'];\n    @Input() public inputValue: SweetAlertOptions['inputValue'];\n    @Input() public inputOptions: SweetAlertOptions['inputOptions'];\n    @Input() public inputAutoTrim: SweetAlertOptions['inputAutoTrim'];\n    @Input() public inputAttributes: SweetAlertOptions['inputAttributes'];\n    @Input() public inputValidator: SweetAlertOptions['inputValidator'];\n    @Input() public validationMessage: SweetAlertOptions['validationMessage'];\n    @Input() public progressSteps: SweetAlertOptions['progressSteps'];\n    @Input() public currentProgressStep: SweetAlertOptions['currentProgressStep'];\n    @Input() public progressStepsDistance: SweetAlertOptions['progressStepsDistance'];\n    @Input() public scrollbarPadding: SweetAlertOptions['scrollbarPadding'];\n\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n     *     previous properties you want to erase again.\n     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    @Input()\n    public set swalOptions(options: SweetAlertOptions) {\n        //=> Update properties\n        Object.assign(this, options);\n\n        //=> Mark changed properties as touched\n        const touchedKeys = Object.keys(options) as Array<keyof SweetAlertOptions>;\n        touchedKeys.forEach(this.markTouched);\n    }\n\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     */\n    public get swalOptions(): SweetAlertOptions {\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n        //   avoiding side effects.\n        return [...this.touchedProps].reduce<SweetAlertOptions>(\n            (obj, key) => ({ ...obj, [key]: this[key as keyof this] }),\n            {});\n    }\n\n    /**\n     * Whether to fire the modal as soon as the <swal> component is created and initialized in the view.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `false`.\n     *\n     * Example:\n     *     <swal *ngIf=\"error\" [title]=\"error.title\" [text]=\"error.text\" icon=\"error\" [swalFireOnInit]=\"true\"></swal>\n     */\n    @Input()\n    public swalFireOnInit?: boolean;\n\n    /**\n     * Whether to dismiss the modal when the <swal> component is destroyed by Angular (for any reason) or not.\n     * When left undefined (default), the value will be inherited from the module configuration, which is `true`.\n     */\n    @Input()\n    public swalDismissOnDestroy?: boolean;\n\n    @Input()\n    public set swalVisible(visible: boolean) {\n        visible ? this.fire() : this.dismiss();\n    }\n\n    public get swalVisible(): boolean {\n        return this.isCurrentlyShown;\n    }\n\n    /**\n     * Emits an event when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     */\n    @Output()\n    public readonly beforeOpen = new EventEmitter<events.BeforeOpenEvent>();\n\n    /**\n     * Emits an event when the modal is shown.\n     */\n    @Output()\n    public readonly open = new EventEmitter<events.OpenEvent>();\n\n    /**\n     * Emits an event when the modal DOM is rendered.\n     */\n    @Output()\n    public readonly render = new EventEmitter<events.RenderEvent>();\n\n    /**\n     * Emits an event when the modal will be closed.\n     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n     */\n    @Output()\n    public readonly close = new EventEmitter<events.CloseEvent>();\n\n    /**\n     * Emits an event after the modal had been closed.\n     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n     */\n    @Output()\n    public readonly afterClose = new EventEmitter<void>();\n\n    /**\n     * Emits an event after the modal had been closed.\n     * The difference between {@link destroy} and {@link afterClose} is that the latter is called for user interactions\n     * only (clicks), whereas {@link destroy} is always called, both for user interactions and popup being closed by\n     * another popup.\n     */\n    @Output()\n    public readonly destroy = new EventEmitter<void>();\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output()\n    public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n     * The reason is `undefined` when {@link dismiss} is called.\n     *\n     * Example:\n     *     <swal (cancel)=\"handleCancel($event)\"></swal>\n     *\n     *     public handleCancel(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    @Output()\n    public readonly cancel = new EventEmitter<Swal.DismissReason | undefined>();\n\n    /**\n     * This Set retains the properties that have been changed from @Inputs, so we can know precisely\n     * what options we have to send to {@link Swal.fire}.\n     */\n    private readonly touchedProps = new Set<keyof SweetAlertOptions>();\n\n    /**\n     * A function of signature `(propName: string): void` that adds a given property name to the list of\n     * touched properties, ie. {@link touchedProps}.\n     */\n    private readonly markTouched = this.touchedProps.add.bind(this.touchedProps);\n\n    /**\n     * Is the SweetAlert2 modal represented by this component currently opened?\n     */\n    private isCurrentlyShown = false;\n\n    public constructor(\n        private readonly sweetAlert2Loader: SweetAlert2LoaderService,\n        @Inject(fireOnInitToken) private readonly moduleLevelFireOnInit: boolean,\n        @Inject(dismissOnDestroyToken) private readonly moduleLevelDismissOnDestroy: boolean) {\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     */\n    public ngOnInit(): void {\n        //=> Preload SweetAlert2 library in case this component is activated.\n        this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Fires the modal, if the component or module is configured to do so.\n     */\n    public ngAfterViewInit(): void {\n        const fireOnInit = this.swalFireOnInit === undefined\n            ? this.moduleLevelFireOnInit\n            : this.swalFireOnInit;\n\n        fireOnInit && this.fire();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n        //   send it with the next fire() or update() calls.\n        Object.keys(changes)\n            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n            .filter((key): key is keyof SweetAlertOptions => !key.startsWith('swal'))\n            .forEach(this.markTouched);\n\n        //=> Eventually trigger re-render if the modal is open.\n        void this.update();\n    }\n\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     */\n    public ngOnDestroy(): void {\n        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n        const dismissOnDestroy = this.swalDismissOnDestroy === undefined\n            ? this.moduleLevelDismissOnDestroy\n            : this.swalDismissOnDestroy;\n\n        dismissOnDestroy && this.dismiss();\n    }\n\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     */\n    public async fire(): Promise<SweetAlertResult> {\n        const swal = await this.sweetAlert2Loader.swal;\n\n        const userOptions = this.swalOptions;\n\n        //=> Build the SweetAlert2 options\n        const options: SweetAlertOptions = {\n            //=> Merge with calculated options set for that specific swal\n            ...userOptions,\n\n            //=> Handle modal lifecycle events\n            onBeforeOpen: composeHook(userOptions.onBeforeOpen, (modalElement) => {\n                this.beforeOpen.emit({ modalElement });\n            }),\n            onOpen: composeHook(userOptions.onOpen, (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.open.emit({ modalElement });\n            }),\n            onRender: composeHook(userOptions.onRender, (modalElement) => {\n                this.render.emit({ modalElement });\n            }),\n            onClose: composeHook(userOptions.onClose, (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.close.emit({ modalElement });\n            }),\n            onAfterClose: composeHook(userOptions.onAfterClose, () => {\n                this.afterClose.emit();\n            }),\n            onDestroy: composeHook(userOptions.onDestroy, () => {\n                this.destroy.emit();\n            })\n        };\n\n        //=> Show the Swal! And wait for confirmation or dimissal.\n        const result = await swal.fire(options);\n\n        //=> Emit on (confirm) or (cancel)\n        if ('value' in result) {\n            this.confirm.emit(result.value);\n        } else {\n            this.cancel.emit(result.dismiss);\n        }\n\n        return result;\n\n        function composeHook<T extends (...args: any[]) => void>(\n            userHook: T | undefined,\n            libHook: T): (...args: Parameters<T>) => void {\n\n            return (...args) => (libHook(...args), userHook?.(...args));\n        }\n    }\n\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param result The value that the modal will resolve with, triggering either (confirm) or (cancel).\n     *               If the argument is not passed, (dimiss) will emit `undefined`.\n     *               See {@link Swal.close}\n     */\n    public async dismiss(result?: SweetAlertResult): Promise<void> {\n        if (!this.isCurrentlyShown) return;\n\n        const swal = await this.sweetAlert2Loader.swal;\n        swal.close(result);\n    }\n\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param options\n     */\n    public async update(options?: Pick<SweetAlertOptions, SweetAlertUpdatableParameters>): Promise<void> {\n        if (options) {\n            this.swalOptions = options;\n        }\n\n        if (!this.isCurrentlyShown) return;\n\n        const swal = await this.sweetAlert2Loader.swal;\n\n        const allOptions = this.swalOptions;\n\n        const updatableOptions = Object.keys(allOptions)\n            .filter(swal.isUpdatableParameter)\n            .reduce<Pick<SweetAlertOptions, SweetAlertUpdatableParameters>>(\n                (obj, key) => ({ ...obj, [key]: allOptions[key] }),\n                {});\n\n        swal.update(updatableOptions);\n    }\n}\n","import {\n    ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output,\n    ViewContainerRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport Swal, { SweetAlertArrayOptions, SweetAlertOptions } from 'sweetalert2';\nimport { SwalComponent } from './swal.component';\n\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n@Directive({\n    selector: '[swal]'\n})\nexport class SwalDirective implements OnInit, OnDestroy {\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    @Input() public set swal(options: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        } else if (isArrayOptions(options)) {\n            this.swalOptions = {};\n            [this.swalOptions.title, this.swalOptions.text, this.swalOptions.icon] = options;\n        } else {\n            this.swalOptions = options;\n        }\n\n        function isArrayOptions(value: any): value is SweetAlertArrayOptions {\n            return Array.isArray(options);\n        }\n    }\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n     * The reason is `undefined` when {@link dismiss} is called.\n     *\n     * Example:\n     *     <swal (cancel)=\"handleCancel($event)\"></swal>\n     *\n     *     public handleCancel(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<Swal.DismissReason | undefined>();\n\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    private swalRef?: ComponentRef<SwalComponent>;\n\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    private swalInstance?: SwalComponent;\n\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    private swalOptions?: SweetAlertOptions;\n\n    public constructor(\n        private readonly viewContainerRef: ViewContainerRef,\n        private readonly resolver: ComponentFactoryResolver) {\n    }\n\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     */\n    public ngOnInit(): void {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     */\n    public ngOnDestroy(): void {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n\n        if (!this.swalInstance) return;\n\n        if (this.swalOptions) {\n            this.swalInstance.swalOptions = this.swalOptions;\n        }\n\n        const swalClosed = new Subject();\n\n        this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.confirm.emit(v));\n        this.swalInstance.cancel.asObservable().pipe(takeUntil(swalClosed)).subscribe(v => this.cancel.emit(v));\n\n        this.swalInstance.fire().then(() => swalClosed.next());\n    }\n}\n","import { Injectable } from '@angular/core';\nimport Swal, { SweetAlertOptions } from 'sweetalert2';\n\nexport interface SwalPortalTarget {\n    options?: SweetAlertOptions;\n    element(swal: typeof Swal): HTMLElement | null;\n}\n\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\n@Injectable({ providedIn: 'root' })\nexport class SwalPortalTargets {\n    /**\n     * Targets the modal close button block contents.\n     */\n    public readonly closeButton: SwalPortalTarget = {\n        element: swal => swal.getCloseButton(),\n        options: { showCloseButton: true }\n    };\n\n    /**\n     * Targets the modal title block contents.\n     */\n    public readonly title: SwalPortalTarget = {\n        element: swal => swal.getTitle(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { title: ' ' }\n    };\n\n    /**\n     * Targets the modal text block contents (that is another block inside the first content block, so you can still\n     * use other modal features like Swal inputs, that are situated inside that parent content block).\n     */\n    public readonly content: SwalPortalTarget = {\n        element: swal => swal.getHtmlContainer(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { text: ' ' }\n    };\n\n    /**\n     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n     * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n     *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.\n     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n     *     performance of everyone, for a relatively rare use case.\n     */\n    public readonly actions: SwalPortalTarget = {\n        element: swal => swal.getActions(),\n        // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n        options: { showConfirmButton: true }\n    };\n\n    /**\n     * Targets the confirm button contents, replacing the text inside it (not the button itself)\n     */\n    public readonly confirmButton: SwalPortalTarget = {\n        element: swal => swal.getConfirmButton(),\n        options: { showConfirmButton: true }\n    };\n\n    /**\n     * Targets the cancel button contents, replacing the text inside it (not the button itself)\n     */\n    public readonly cancelButton: SwalPortalTarget = {\n        element: swal => swal.getCancelButton(),\n        options: { showCancelButton: true }\n    };\n\n    /**\n     * Targets the modal footer contents.\n     */\n    public readonly footer: SwalPortalTarget = {\n        element: swal => swal.getFooter(),\n        // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n        options: { footer: ' ' }\n    };\n}\n","import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\n@Component({\n    selector: 'swal-portal',\n    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalPortalComponent {\n    @Input() public template: TemplateRef<any> | null = null;\n}\n","import {\n    ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, Host, Injector, Input, OnDestroy, OnInit,\n    TemplateRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SwalPortalTarget, SwalPortalTargets } from './swal-portal-targets.service';\nimport { SwalPortalComponent } from './swal-portal.component';\nimport { SwalComponent } from './swal.component';\nimport { SweetAlert2LoaderService } from './sweetalert2-loader.service';\n\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n@Directive({\n    selector: '[swalPortal]'\n})\nexport class SwalPortalDirective implements OnInit, OnDestroy {\n    /**\n     * Takes a portal target or nothing (then it will target the text content zone by default).\n     *\n     * See the {@link SwalPortalTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    @Input('swalPortal') public target?: SwalPortalTarget;\n\n    /**\n     * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.\n     */\n    private portalComponentRef?: ComponentRef<SwalPortalComponent>;\n\n    private readonly destroyed = new Subject<void>();\n\n    public constructor(\n        private readonly resolver: ComponentFactoryResolver,\n        private readonly injector: Injector,\n        private readonly app: ApplicationRef,\n        private readonly templateRef: TemplateRef<any>,\n        private readonly sweetAlert2Loader: SweetAlert2LoaderService,\n        private readonly swalTargets: SwalPortalTargets,\n        @Host() private readonly swalComponent: SwalComponent) {\n    }\n\n    /**\n     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n     * that will receive the consumer's template.\n     */\n    public ngOnInit(): void {\n        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n        this.target = this.target || this.swalTargets.content;\n\n        //=> Apply the options provided by the target definition\n        void this.swalComponent.update(this.target.options);\n\n        //=> Subscribe to a few hooks frm the parent SwalComponent.\n        this.swalComponent.render.pipe(takeUntil(this.destroyed)).subscribe(this.renderHook.bind(this));\n        this.swalComponent.beforeOpen.pipe(takeUntil(this.destroyed)).subscribe(this.beforeOpenHook.bind(this));\n        this.swalComponent.destroy.pipe(takeUntil(this.destroyed)).subscribe(this.destroyHook.bind(this));\n    }\n\n    /**\n     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     */\n    public ngOnDestroy(): void {\n        this.destroyed.next();\n    }\n\n    /**\n     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {@link beforeOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     */\n    private async renderHook(): Promise<void> {\n        //=> Ensure the portal component is created\n        if (!this.portalComponentRef) {\n            this.portalComponentRef = this.createPortalComponent();\n        }\n\n        //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n        // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n        // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n        // the portal component is fully synchronous, causing no blinks in the modal contents.\n        const swal = await this.sweetAlert2Loader.swal;\n\n        //=> Find target element\n        const targetEl = this.target!.element(swal);\n        if (!targetEl) return;\n\n        //=> Replace target's contents with our component\n        // https://jsperf.com/innerhtml-vs-removechild/15\n        while (targetEl.firstChild) {\n            targetEl.removeChild(targetEl.firstChild);\n        }\n\n        targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n    }\n\n    /**\n     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     */\n    private beforeOpenHook(): void {\n        if (!this.portalComponentRef) return;\n\n        //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n        this.app.attachView(this.portalComponentRef.hostView);\n    }\n\n    /**\n     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     */\n    private destroyHook(): void {\n        if (!this.portalComponentRef) return;\n\n        //=> Detach the portal component from the app and destroy it\n        this.app.detachView(this.portalComponentRef.hostView);\n        this.portalComponentRef.destroy();\n        this.portalComponentRef = void 0;\n    }\n\n    /**\n     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.\n     */\n    private createPortalComponent(): ComponentRef<SwalPortalComponent> {\n        //=> Create the SwalPortalComponent that will hold our content\n        const factory = this.resolver.resolveComponentFactory(SwalPortalComponent);\n\n        // Yes, we do not use the third argument that would directly use the target as the component's view\n        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n        // able to restore it at any moment, ie. after the modal has been re-rendered.\n        const componentRef = factory.create(this.injector, []);\n\n        //=> Apply the consumer's template on the component\n        componentRef.instance.template = this.templateRef;\n\n        return componentRef;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { dismissOnDestroyToken, fireOnInitToken, swalProviderToken } from './di';\nimport { SwalPortalComponent } from './swal-portal.component';\nimport { SwalPortalDirective } from './swal-portal.directive';\nimport { SwalComponent } from './swal.component';\nimport { SwalDirective } from './swal.directive';\nimport { SwalProvider, SweetAlert2LoaderService } from './sweetalert2-loader.service';\n\nexport interface Sweetalert2ModuleConfig {\n    provideSwal?: SwalProvider;\n    fireOnInit?: boolean;\n    dismissOnDestroy?: boolean;\n}\n\nexport function provideDefaultSwal() {\n    return import('sweetalert2');\n}\n\n@NgModule({\n    declarations: [\n        SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        SwalComponent, SwalPortalDirective, SwalDirective\n    ],\n    entryComponents: [\n        SwalComponent, SwalPortalComponent\n    ]\n})\nexport class SweetAlert2Module {\n    public static forRoot(options: Sweetalert2ModuleConfig = {}): ModuleWithProviders<SweetAlert2Module> {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                SweetAlert2LoaderService,\n                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },\n                { provide: fireOnInitToken, useValue: options.fireOnInit || false },\n                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }\n            ]\n        };\n    }\n\n    public static forChild(options: Sweetalert2ModuleConfig = {}): ModuleWithProviders<SweetAlert2Module> {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                ...options.provideSwal ? [\n                    SweetAlert2LoaderService,\n                    { provide: swalProviderToken, useValue: options.provideSwal }\n                ] : [],\n                ...options.fireOnInit !== undefined ? [\n                    { provide: fireOnInitToken, useValue: options.fireOnInit }\n                ] : [],\n                ...options.dismissOnDestroy !== undefined ? [\n                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }\n                ] : []\n            ]\n        };\n    }\n}\n"]}