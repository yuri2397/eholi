import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Represents an object of targets for <swal> portals (use with *swalPortal directive).
 * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is
 * shown, so this object lets us reference those functions safely and in a statically-typed manner.
 */
var SwalPortalTargets = /** @class */ (function () {
    function SwalPortalTargets() {
        /**
         * Targets the modal close button block contents.
         */
        this.closeButton = {
            element: function (swal) { return swal.getCloseButton(); },
            options: { showCloseButton: true }
        };
        /**
         * Targets the modal title block contents.
         */
        this.title = {
            element: function (swal) { return swal.getTitle(); },
            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
            options: { title: ' ' }
        };
        /**
         * Targets the modal text block contents (that is another block inside the first content block, so you can still
         * use other modal features like Swal inputs, that are situated inside that parent content block).
         */
        this.content = {
            element: function (swal) { return swal.getHtmlContainer(); },
            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
            options: { text: ' ' }
        };
        /**
         * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.
         * /!\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this
         *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.
         *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and
         *     performance of everyone, for a relatively rare use case.
         */
        this.actions = {
            element: function (swal) { return swal.getActions(); },
            // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.
            options: { showConfirmButton: true }
        };
        /**
         * Targets the confirm button contents, replacing the text inside it (not the button itself)
         */
        this.confirmButton = {
            element: function (swal) { return swal.getConfirmButton(); },
            options: { showConfirmButton: true }
        };
        /**
         * Targets the cancel button contents, replacing the text inside it (not the button itself)
         */
        this.cancelButton = {
            element: function (swal) { return swal.getCancelButton(); },
            options: { showCancelButton: true }
        };
        /**
         * Targets the modal footer contents.
         */
        this.footer = {
            element: function (swal) { return swal.getFooter(); },
            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
            options: { footer: ' ' }
        };
    }
    SwalPortalTargets.ɵprov = i0.ɵɵdefineInjectable({ factory: function SwalPortalTargets_Factory() { return new SwalPortalTargets(); }, token: SwalPortalTargets, providedIn: "root" });
    SwalPortalTargets = __decorate([
        Injectable({ providedIn: 'root' })
    ], SwalPortalTargets);
    return SwalPortalTargets;
}());
export { SwalPortalTargets };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC1wb3J0YWwtdGFyZ2V0cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3ZWV0YWxlcnQyL25neC1zd2VldGFsZXJ0Mi8iLCJzb3VyY2VzIjpbImxpYi9zd2FsLXBvcnRhbC10YXJnZXRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBUTNDOzs7O0dBSUc7QUFFSDtJQUFBO1FBQ0k7O1dBRUc7UUFDYSxnQkFBVyxHQUFxQjtZQUM1QyxPQUFPLEVBQUUsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQXJCLENBQXFCO1lBQ3RDLE9BQU8sRUFBRSxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUU7U0FDckMsQ0FBQztRQUVGOztXQUVHO1FBQ2EsVUFBSyxHQUFxQjtZQUN0QyxPQUFPLEVBQUUsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQWYsQ0FBZTtZQUNoQywwRkFBMEY7WUFDMUYsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtTQUMxQixDQUFDO1FBRUY7OztXQUdHO1FBQ2EsWUFBTyxHQUFxQjtZQUN4QyxPQUFPLEVBQUUsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBdkIsQ0FBdUI7WUFDeEMsMEZBQTBGO1lBQzFGLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUU7U0FDekIsQ0FBQztRQUVGOzs7Ozs7V0FNRztRQUNhLFlBQU8sR0FBcUI7WUFDeEMsT0FBTyxFQUFFLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFqQixDQUFpQjtZQUNsQyw2R0FBNkc7WUFDN0csT0FBTyxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFO1NBQ3ZDLENBQUM7UUFFRjs7V0FFRztRQUNhLGtCQUFhLEdBQXFCO1lBQzlDLE9BQU8sRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUF2QixDQUF1QjtZQUN4QyxPQUFPLEVBQUUsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUU7U0FDdkMsQ0FBQztRQUVGOztXQUVHO1FBQ2EsaUJBQVksR0FBcUI7WUFDN0MsT0FBTyxFQUFFLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUF0QixDQUFzQjtZQUN2QyxPQUFPLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUU7U0FDdEMsQ0FBQztRQUVGOztXQUVHO1FBQ2EsV0FBTSxHQUFxQjtZQUN2QyxPQUFPLEVBQUUsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQWhCLENBQWdCO1lBQ2pDLDBGQUEwRjtZQUMxRixPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO1NBQzNCLENBQUM7S0FDTDs7SUFqRVksaUJBQWlCO1FBRDdCLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQztPQUN0QixpQkFBaUIsQ0FpRTdCOzRCQS9FRDtDQStFQyxBQWpFRCxJQWlFQztTQWpFWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgU3dhbCwgeyBTd2VldEFsZXJ0T3B0aW9ucyB9IGZyb20gJ3N3ZWV0YWxlcnQyJztcblxuZXhwb3J0IGludGVyZmFjZSBTd2FsUG9ydGFsVGFyZ2V0IHtcbiAgICBvcHRpb25zPzogU3dlZXRBbGVydE9wdGlvbnM7XG4gICAgZWxlbWVudChzd2FsOiB0eXBlb2YgU3dhbCk6IEhUTUxFbGVtZW50IHwgbnVsbDtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIG9iamVjdCBvZiB0YXJnZXRzIGZvciA8c3dhbD4gcG9ydGFscyAodXNlIHdpdGggKnN3YWxQb3J0YWwgZGlyZWN0aXZlKS5cbiAqIFdlIG11c3QgdXNlIHRodW5rcyB0byBhY2Nlc3MgdGhlIFN3YWwuKiBmdW5jdGlvbnMgbGlzdGVkIGJlbG93LCBiZWNhdXNlIHRoZXkgZ2V0IGNyZWF0ZWQgYWZ0ZXIgdGhlIGZpcnN0IG1vZGFsIGlzXG4gKiBzaG93biwgc28gdGhpcyBvYmplY3QgbGV0cyB1cyByZWZlcmVuY2UgdGhvc2UgZnVuY3Rpb25zIHNhZmVseSBhbmQgaW4gYSBzdGF0aWNhbGx5LXR5cGVkIG1hbm5lci5cbiAqL1xuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBTd2FsUG9ydGFsVGFyZ2V0cyB7XG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgbW9kYWwgY2xvc2UgYnV0dG9uIGJsb2NrIGNvbnRlbnRzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBjbG9zZUJ1dHRvbjogU3dhbFBvcnRhbFRhcmdldCA9IHtcbiAgICAgICAgZWxlbWVudDogc3dhbCA9PiBzd2FsLmdldENsb3NlQnV0dG9uKCksXG4gICAgICAgIG9wdGlvbnM6IHsgc2hvd0Nsb3NlQnV0dG9uOiB0cnVlIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgbW9kYWwgdGl0bGUgYmxvY2sgY29udGVudHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IHRpdGxlOiBTd2FsUG9ydGFsVGFyZ2V0ID0ge1xuICAgICAgICBlbGVtZW50OiBzd2FsID0+IHN3YWwuZ2V0VGl0bGUoKSxcbiAgICAgICAgLy8gRW1wdHkgdGV4dCB0aGF0IHdpbGwgbmV2ZXIgYmUgc2hvd24gYnV0IG5lY2Vzc2FyeSBzbyBTd2VldEFsZXJ0MiBtYWtlcyB0aGUgZGl2IHZpc2libGUuXG4gICAgICAgIG9wdGlvbnM6IHsgdGl0bGU6ICcgJyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIG1vZGFsIHRleHQgYmxvY2sgY29udGVudHMgKHRoYXQgaXMgYW5vdGhlciBibG9jayBpbnNpZGUgdGhlIGZpcnN0IGNvbnRlbnQgYmxvY2ssIHNvIHlvdSBjYW4gc3RpbGxcbiAgICAgKiB1c2Ugb3RoZXIgbW9kYWwgZmVhdHVyZXMgbGlrZSBTd2FsIGlucHV0cywgdGhhdCBhcmUgc2l0dWF0ZWQgaW5zaWRlIHRoYXQgcGFyZW50IGNvbnRlbnQgYmxvY2spLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBjb250ZW50OiBTd2FsUG9ydGFsVGFyZ2V0ID0ge1xuICAgICAgICBlbGVtZW50OiBzd2FsID0+IHN3YWwuZ2V0SHRtbENvbnRhaW5lcigpLFxuICAgICAgICAvLyBFbXB0eSB0ZXh0IHRoYXQgd2lsbCBuZXZlciBiZSBzaG93biBidXQgbmVjZXNzYXJ5IHNvIFN3ZWV0QWxlcnQyIG1ha2VzIHRoZSBkaXYgdmlzaWJsZS5cbiAgICAgICAgb3B0aW9uczogeyB0ZXh0OiAnICcgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBhY3Rpb25zIGJsb2NrIGNvbnRlbnRzLCB3aGVyZSBhcmUgdGhlIGNvbmZpcm0gYW5kIGNhbmNlbCBidXR0b25zIGluIGEgbm9ybWFsIHRpbWUuXG4gICAgICogLyFcXCBXQVJOSU5HOiB1c2luZyB0aGlzIHRhcmdldCBkZXN0cm95cyBzb21lIG9mIHRoZSBuYXRpdmUgU3dlZXRBbGVydDIgbW9kYWwncyBET00sIHRoZXJlZm9yZSwgaWYgeW91IHVzZSB0aGlzXG4gICAgICogICAgIHRhcmdldCwgZG8gbm90IHVwZGF0ZSB0aGUgbW9kYWwgdmlhIDxzd2FsPiBASW5wdXRzIHdoaWxlIHRoZSBtb2RhbCBpcyBvcGVuLCBvciB5b3UnbGwgZ2V0IGFuIGVycm9yLlxuICAgICAqICAgICBXZSBjb3VsZCB3b3JrYXJvdW5kIHRoYXQgaW5jb252ZW5pZW50IGluc2lkZSB0aGlzIGludGVncmF0aW9uLCBidXQgdGhhdCdkIGJlIGRldHJpbWVudGFsIHRvIG1lbW9yeSBhbmRcbiAgICAgKiAgICAgcGVyZm9ybWFuY2Ugb2YgZXZlcnlvbmUsIGZvciBhIHJlbGF0aXZlbHkgcmFyZSB1c2UgY2FzZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYWN0aW9uczogU3dhbFBvcnRhbFRhcmdldCA9IHtcbiAgICAgICAgZWxlbWVudDogc3dhbCA9PiBzd2FsLmdldEFjdGlvbnMoKSxcbiAgICAgICAgLy8gVGhlIGJ1dHRvbiB3aWxsIG5ldmVyIGV4aXN0LCBidXQgU3dlZXRBbGVydDIgc2hvd3MgdGhlIGFjdGlvbnMgYmxvY2sgb25seSBpZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgYnV0dG9uLlxuICAgICAgICBvcHRpb25zOiB7IHNob3dDb25maXJtQnV0dG9uOiB0cnVlIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgY29uZmlybSBidXR0b24gY29udGVudHMsIHJlcGxhY2luZyB0aGUgdGV4dCBpbnNpZGUgaXQgKG5vdCB0aGUgYnV0dG9uIGl0c2VsZilcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgY29uZmlybUJ1dHRvbjogU3dhbFBvcnRhbFRhcmdldCA9IHtcbiAgICAgICAgZWxlbWVudDogc3dhbCA9PiBzd2FsLmdldENvbmZpcm1CdXR0b24oKSxcbiAgICAgICAgb3B0aW9uczogeyBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIGNhbmNlbCBidXR0b24gY29udGVudHMsIHJlcGxhY2luZyB0aGUgdGV4dCBpbnNpZGUgaXQgKG5vdCB0aGUgYnV0dG9uIGl0c2VsZilcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgY2FuY2VsQnV0dG9uOiBTd2FsUG9ydGFsVGFyZ2V0ID0ge1xuICAgICAgICBlbGVtZW50OiBzd2FsID0+IHN3YWwuZ2V0Q2FuY2VsQnV0dG9uKCksXG4gICAgICAgIG9wdGlvbnM6IHsgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIG1vZGFsIGZvb3RlciBjb250ZW50cy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgZm9vdGVyOiBTd2FsUG9ydGFsVGFyZ2V0ID0ge1xuICAgICAgICBlbGVtZW50OiBzd2FsID0+IHN3YWwuZ2V0Rm9vdGVyKCksXG4gICAgICAgIC8vIEVtcHR5IHRleHQgdGhhdCB3aWxsIG5ldmVyIGJlIHNob3duIGJ1dCBuZWNlc3Nhcnkgc28gU3dlZXRBbGVydDIgbWFrZXMgdGhlIGRpdiB2aXNpYmxlLlxuICAgICAgICBvcHRpb25zOiB7IGZvb3RlcjogJyAnIH1cbiAgICB9O1xufVxuIl19