import { __awaiter, __decorate, __param } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';
import { dismissOnDestroyToken, fireOnInitToken } from './di';
import { SweetAlert2LoaderService } from './sweetalert2-loader.service';
/**
 * <swal> component. See the README.md for usage.
 *
 * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.
 * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled
 * to SweetAlert2, but also is type-safe.
 *
 * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,
 *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.
 *
 * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.
 *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.
 *     If you are really concerned about performance and/or don't care about the API and its convenient integration
 *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)
 *
 * /!\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, onClose, onAfterClose and onDestroy
 *     (but without "on*" prefix to respect community standards).
 *     However, preConfirm and inputValidator are still @Inputs because there are not event handlers, there can't be
 *     multiple listeners and we need the values they can/must return.
 */
let SwalComponent = class SwalComponent {
    constructor(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {
        this.sweetAlert2Loader = sweetAlert2Loader;
        this.moduleLevelFireOnInit = moduleLevelFireOnInit;
        this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;
        /**
         * Emits an event when the modal DOM element has been created.
         * Useful to perform DOM mutations before the modal is shown.
         */
        this.beforeOpen = new EventEmitter();
        /**
         * Emits an event when the modal is shown.
         */
        this.open = new EventEmitter();
        /**
         * Emits an event when the modal DOM is rendered.
         */
        this.render = new EventEmitter();
        /**
         * Emits an event when the modal will be closed.
         * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.
         */
        this.close = new EventEmitter();
        /**
         * Emits an event after the modal had been closed.
         * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.
         */
        this.afterClose = new EventEmitter();
        /**
         * Emits an event after the modal had been closed.
         * The difference between {@link destroy} and {@link afterClose} is that the latter is called for user interactions
         * only (clicks), whereas {@link destroy} is always called, both for user interactions and popup being closed by
         * another popup.
         */
        this.destroy = new EventEmitter();
        /**
         * Emits when the user clicks "Confirm".
         * Bears a value when using "input", resolved "preConfirm", etc.
         *
         * Example:
         *     <swal (confirm)="handleConfirm($event)"></swal>
         *
         *     public handleConfirm(email: string): void {
         *         // ... save user email
         *     }
         */
        this.confirm = new EventEmitter();
        /**
         * Emits when the user clicks "Cancel", or dismisses the modal by any other allowed way.
         * By default, it will emit a string representing the reason for which the SweetAlert has been closed.
         * The reason is `undefined` when {@link dismiss} is called.
         *
         * Example:
         *     <swal (cancel)="handleCancel($event)"></swal>
         *
         *     public handleCancel(reason: DismissReason | undefined): void {
         *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.
         *         // ... do something
         *     }
         */
        this.cancel = new EventEmitter();
        /**
         * This Set retains the properties that have been changed from @Inputs, so we can know precisely
         * what options we have to send to {@link Swal.fire}.
         */
        this.touchedProps = new Set();
        /**
         * A function of signature `(propName: string): void` that adds a given property name to the list of
         * touched properties, ie. {@link touchedProps}.
         */
        this.markTouched = this.touchedProps.add.bind(this.touchedProps);
        /**
         * Is the SweetAlert2 modal represented by this component currently opened?
         */
        this.isCurrentlyShown = false;
    }
    /**
     * An object of SweetAlert2 native options, useful if:
     *  - you don't want to use the @Inputs for practical/philosophical reasons ;
     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.
     *
     * /!\ Please note that setting this property does NOT erase what has been set before unless you specify the
     *     previous properties you want to erase again.
     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.
     *
     * /!\ Be aware that the options defined in this object will override the @Inputs of the same name.
     */
    set swalOptions(options) {
        //=> Update properties
        Object.assign(this, options);
        //=> Mark changed properties as touched
        const touchedKeys = Object.keys(options);
        touchedKeys.forEach(this.markTouched);
    }
    /**
     * Computes the options object that will get passed to SweetAlert2.
     * Only the properties that have been set at least once on this component will be returned.
     * Mostly for internal usage.
     */
    get swalOptions() {
        //=> We will compute the options object based on the option keys that are known to have changed.
        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially
        //   avoiding side effects.
        return [...this.touchedProps].reduce((obj, key) => (Object.assign(Object.assign({}, obj), { [key]: this[key] })), {});
    }
    set swalVisible(visible) {
        visible ? this.fire() : this.dismiss();
    }
    get swalVisible() {
        return this.isCurrentlyShown;
    }
    /**
     * Angular lifecycle hook.
     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there
     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,
     * causing no delay.
     */
    ngOnInit() {
        //=> Preload SweetAlert2 library in case this component is activated.
        this.sweetAlert2Loader.preloadSweetAlertLibrary();
    }
    /**
     * Angular lifecycle hook.
     * Fires the modal, if the component or module is configured to do so.
     */
    ngAfterViewInit() {
        const fireOnInit = this.swalFireOnInit === undefined
            ? this.moduleLevelFireOnInit
            : this.swalFireOnInit;
        fireOnInit && this.fire();
    }
    /**
     * Angular lifecycle hook.
     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.
     */
    ngOnChanges(changes) {
        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can
        //   send it with the next fire() or update() calls.
        Object.keys(changes)
            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter
            .filter((key) => !key.startsWith('swal'))
            .forEach(this.markTouched);
        //=> Eventually trigger re-render if the modal is open.
        void this.update();
    }
    /**
     * Angular lifecycle hook.
     * Closes the SweetAlert when the component is destroyed.
     */
    ngOnDestroy() {
        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.
        const dismissOnDestroy = this.swalDismissOnDestroy === undefined
            ? this.moduleLevelDismissOnDestroy
            : this.swalDismissOnDestroy;
        dismissOnDestroy && this.dismiss();
    }
    /**
     * Shows the SweetAlert.
     *
     * Returns the SweetAlert2 promise for convenience and use in code behind templates.
     * Otherwise, (confirm)="myHandler($event)" and (cancel)="myHandler($event)" can be used in templates.
     */
    fire() {
        return __awaiter(this, void 0, void 0, function* () {
            const swal = yield this.sweetAlert2Loader.swal;
            const userOptions = this.swalOptions;
            //=> Build the SweetAlert2 options
            const options = Object.assign(Object.assign({}, userOptions), { 
                //=> Handle modal lifecycle events
                onBeforeOpen: composeHook(userOptions.onBeforeOpen, (modalElement) => {
                    this.beforeOpen.emit({ modalElement });
                }), onOpen: composeHook(userOptions.onOpen, (modalElement) => {
                    this.isCurrentlyShown = true;
                    this.open.emit({ modalElement });
                }), onRender: composeHook(userOptions.onRender, (modalElement) => {
                    this.render.emit({ modalElement });
                }), onClose: composeHook(userOptions.onClose, (modalElement) => {
                    this.isCurrentlyShown = false;
                    this.close.emit({ modalElement });
                }), onAfterClose: composeHook(userOptions.onAfterClose, () => {
                    this.afterClose.emit();
                }), onDestroy: composeHook(userOptions.onDestroy, () => {
                    this.destroy.emit();
                }) });
            //=> Show the Swal! And wait for confirmation or dimissal.
            const result = yield swal.fire(options);
            //=> Emit on (confirm) or (cancel)
            if ('value' in result) {
                this.confirm.emit(result.value);
            }
            else {
                this.cancel.emit(result.dismiss);
            }
            return result;
            function composeHook(userHook, libHook) {
                return (...args) => (libHook(...args), userHook === null || userHook === void 0 ? void 0 : userHook(...args));
            }
        });
    }
    /**
     * Closes the modal, if opened.
     *
     * @param result The value that the modal will resolve with, triggering either (confirm) or (cancel).
     *               If the argument is not passed, (dimiss) will emit `undefined`.
     *               See {@link Swal.close}
     */
    dismiss(result) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isCurrentlyShown)
                return;
            const swal = yield this.sweetAlert2Loader.swal;
            swal.close(result);
        });
    }
    /**
     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.
     * If the modal is not opened, the component options will simply be updated and that's it.
     *
     * /!\ Please note that not all SweetAlert2 options are updatable while the modal is opened.
     *
     * @param options
     */
    update(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options) {
                this.swalOptions = options;
            }
            if (!this.isCurrentlyShown)
                return;
            const swal = yield this.sweetAlert2Loader.swal;
            const allOptions = this.swalOptions;
            const updatableOptions = Object.keys(allOptions)
                .filter(swal.isUpdatableParameter)
                .reduce((obj, key) => (Object.assign(Object.assign({}, obj), { [key]: allOptions[key] })), {});
            swal.update(updatableOptions);
        });
    }
};
SwalComponent.ctorParameters = () => [
    { type: SweetAlert2LoaderService },
    { type: Boolean, decorators: [{ type: Inject, args: [fireOnInitToken,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [dismissOnDestroyToken,] }] }
];
__decorate([
    Input()
], SwalComponent.prototype, "title", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "titleText", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "text", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "html", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "footer", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "icon", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "iconHtml", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "backdrop", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "toast", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "target", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "input", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "width", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "padding", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "background", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "position", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "grow", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "showClass", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "hideClass", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "customClass", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "timer", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "timerProgressBar", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "animation", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "heightAuto", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "allowOutsideClick", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "allowEscapeKey", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "allowEnterKey", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "stopKeydownPropagation", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "keydownListenerCapture", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "showConfirmButton", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "showCancelButton", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "confirmButtonText", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "cancelButtonText", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "confirmButtonColor", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "cancelButtonColor", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "confirmButtonAriaLabel", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "cancelButtonAriaLabel", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "buttonsStyling", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "reverseButtons", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "focusConfirm", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "focusCancel", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "showCloseButton", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "closeButtonHtml", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "closeButtonAriaLabel", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "showLoaderOnConfirm", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "preConfirm", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "imageUrl", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "imageWidth", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "imageHeight", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "imageAlt", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "inputPlaceholder", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "inputValue", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "inputOptions", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "inputAutoTrim", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "inputAttributes", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "inputValidator", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "validationMessage", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "progressSteps", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "currentProgressStep", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "progressStepsDistance", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "scrollbarPadding", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "swalOptions", null);
__decorate([
    Input()
], SwalComponent.prototype, "swalFireOnInit", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "swalDismissOnDestroy", void 0);
__decorate([
    Input()
], SwalComponent.prototype, "swalVisible", null);
__decorate([
    Output()
], SwalComponent.prototype, "beforeOpen", void 0);
__decorate([
    Output()
], SwalComponent.prototype, "open", void 0);
__decorate([
    Output()
], SwalComponent.prototype, "render", void 0);
__decorate([
    Output()
], SwalComponent.prototype, "close", void 0);
__decorate([
    Output()
], SwalComponent.prototype, "afterClose", void 0);
__decorate([
    Output()
], SwalComponent.prototype, "destroy", void 0);
__decorate([
    Output()
], SwalComponent.prototype, "confirm", void 0);
__decorate([
    Output()
], SwalComponent.prototype, "cancel", void 0);
SwalComponent = __decorate([
    Component({
        // tslint:disable-next-line:component-selector
        selector: 'swal',
        template: '',
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    __param(1, Inject(fireOnInitToken)),
    __param(2, Inject(dismissOnDestroyToken))
], SwalComponent);
export { SwalComponent };
//# sourceMappingURL=data:application/json;base64,